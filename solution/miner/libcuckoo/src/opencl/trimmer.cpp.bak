#include <time.h>

#include "trimmer.h"
namespace cuckoogpu {

#define DUCK_A_EDGES_NX (DUCK_A_EDGES * NX)
#define DUCK_B_EDGES (EDGES_B)
#define DUCK_B_EDGES_NX (DUCK_B_EDGES * NX)


int com(const void *a, const void *b){
	cl_uint2 va = *(cl_uint2*)a;
	cl_uint2 vb = *(cl_uint2*)b;
	if(va.x == vb.y) return va.y - vb.y;
	else return va.x - vb.x;
}

void saveFile(cl_uint2*v, int n, char *filename){
	qsort(v, n, sizeof(cl_uint2), com);
	FILE *fp = fopen(filename, "w");
	for(int i = 0; i < n; i++){
		fprintf(fp, "%d,%d\n", v[i].x, v[i].y);
	}
	fclose(fp);
}

edgetrimmer::edgetrimmer(const trimparams _tp, cl_context context,
			     cl_command_queue commandQueue,
			     cl_program program, int _selected) {
	this->context = context;
	this->commandQueue = commandQueue;
	this->program = program;
	this->selected = _selected;
	indexesSize = NX * NY * sizeof (u32);
	tp = _tp;

	cl_int clResult;
	dipkeys = clCreateBuffer(this->context, CL_MEM_READ_ONLY, sizeof (siphash_keys), NULL, &clResult);
	checkOpenclErrors(clResult);

	indexesE = clCreateBuffer(context, CL_MEM_READ_WRITE, indexesSize * (1+NB), NULL, &clResult);
	checkOpenclErrors(clResult);

	recoveredges = clCreateBuffer(context, CL_MEM_READ_ONLY, sizeof (cl_uint2) * PROOFSIZE, NULL, &clResult);
	checkOpenclErrors(clResult);

	sizeA = ROW_EDGES_A * NX * (selected == 0 && tp.expand > 0 ? sizeof(uint) : sizeof (cl_uint2));
	sizeB = ROW_EDGES_B * NX * (selected == 0 && tp.expand > 1 ? sizeof(uint) : sizeof (cl_uint2));

	const size_t bufferSize = sizeA + sizeB / NB;
//	fprintf(stderr, "bufferSize: %lu\n", bufferSize);
	bufferA =
	    clCreateBuffer(context, CL_MEM_READ_WRITE, bufferSize, NULL, &clResult);
	checkOpenclErrors(clResult);
	bufferB = bufferA;
	bufferAB = bufferA;
       // bufferB  = bufferA + (bufferSize - sizeB);
       // bufferAB = bufferA + sizeB / NB;
}

    u64 edgetrimmer::globalbytes() const {
		return (sizeA + sizeB / NB) + (1+NB) * indexesSize + sizeof (siphash_keys);
    }
    edgetrimmer::~edgetrimmer() {
		clReleaseMemObject(bufferA);
		clReleaseMemObject(recoveredges);
		clReleaseMemObject(indexesE);
		clReleaseMemObject(dipkeys);
		releaseCommandQueue(commandQueue);
		releaseProgram(program);
		releaseContext(context);
    }

    u32 edgetrimmer::trim(uint32_t device) {
	const u32 ZERO = 0;
	const u32 ONE = 1;

	size_t tmpSize = indexesSize;

	cl_int clResult;
	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), indexesSize, tmpSize, 0, NULL, NULL);
	checkOpenclErrors(clResult);

	clResult = clEnqueueWriteBuffer(commandQueue, dipkeys, CL_TRUE, 0, sizeof (siphash_keys), &sipkeys, 0, NULL, NULL);
	checkOpenclErrors(clResult);

	clFinish(commandQueue);

	size_t global_work_size[1];
	size_t local_work_size[1];
	global_work_size[0] = tp.genA.blocks * tp.genA.tpb;
	local_work_size[0] = tp.genA.tpb;
	cl_event event;
	int edges_a = EDGES_A;
	cl_kernel seedA_kernel = NULL;
    if(selected == 0) seedA_kernel = clCreateKernel(program, "Cuckoo_SeedA", &clResult);
	else seedA_kernel = clCreateKernel(program, "Cuckaroo_SeedA", &clResult);

	uint srcIdx_offset = indexesSize / sizeof(u32);
	uint bufAB_offset = sizeB / NB;

//	checkOpenclErrors(clResult);
	clResult |= clSetKernelArg(seedA_kernel, 0, sizeof (cl_mem), (void *) &dipkeys);
	clResult |= clSetKernelArg(seedA_kernel, 1, sizeof (cl_mem),(void *) &bufferAB);
	clResult |= clSetKernelArg(seedA_kernel, 2, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(seedA_kernel, 3, sizeof (int), &edges_a);
	clResult |= clSetKernelArg(seedA_kernel, 4, sizeof (u32), &bufAB_offset);
	clResult |= clSetKernelArg(seedA_kernel, 5, sizeof (u32), &srcIdx_offset);
	clResult |= clEnqueueNDRangeKernel(commandQueue, seedA_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
	
	checkOpenclErrors(clResult);
	clFinish(commandQueue);

	u32 halfA0 = 0;
	u32 halfE0 = 0;
	
	size_t qA = sizeA / NA;
	size_t qE = NX2 / NA;

	cl_kernel seedB_kernel = clCreateKernel(program, "SeedB", &clResult);

	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), 0, tmpSize, 0, NULL, NULL);
	global_work_size[0] = tp.genB.blocks / NA * tp.genB.tpb;
	local_work_size[0] = tp.genB.tpb;

	for(u32 i = 0; i < NA; i++){
		uint idx0_offset = i*qE + indexesSize / sizeof(u32);
		uint idx1_offset = i*qE;
		halfA0 = i * qA;
		clResult |= clSetKernelArg(seedB_kernel, 0, sizeof (cl_mem), (void *) &dipkeys);
		clResult |= clSetKernelArg(seedB_kernel, 1, sizeof (cl_mem), (void *) &bufferAB);
		clResult |= clSetKernelArg(seedB_kernel, 2, sizeof (cl_mem), (void *) &bufferA);
		clResult |= clSetKernelArg(seedB_kernel, 3, sizeof (cl_mem), (void *) &indexesE);
		clResult |= clSetKernelArg(seedB_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
		clResult |= clSetKernelArg(seedB_kernel, 5, sizeof (u32), &edges_a);
		clResult |= clSetKernelArg(seedB_kernel, 6, sizeof (u32), &halfA0);
		clResult |= clSetKernelArg(seedB_kernel, 7, sizeof (u32), &halfE0);
		clResult |= clSetKernelArg(seedB_kernel, 8, sizeof (u32), &bufAB_offset);
		clResult |= clSetKernelArg(seedB_kernel, 9, sizeof (u32), &idx0_offset);
		clResult |= clSetKernelArg(seedB_kernel, 10, sizeof (u32), &idx1_offset);
		checkOpenclErrors(clResult);

		clResult = clEnqueueNDRangeKernel(commandQueue, seedB_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
		checkOpenclErrors(clResult);
	}

	clFinish(commandQueue);


	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), indexesSize, tmpSize*(NB), 0, NULL, NULL);
	checkOpenclErrors(clResult);

	qA = sizeA/ NB;
	const size_t qB = sizeB/NB;
	qE = NX2 / NB;

	cl_kernel round_kernel;
	cl_kernel round_uint2_uint2_kernel = clCreateKernel(program, "Round", &clResult);
	cl_kernel round_uint_uint2_kernel = clCreateKernel(program, "Round_uint_uint2", &clResult);
	cl_kernel round_uint_uint_kernel = clCreateKernel(program, "Round_uint_uint", &clResult);

	if(selected != 0 || tp.expand == 0) round_kernel = round_uint2_uint2_kernel;
	else if(tp.expand == 1) round_kernel = round_uint_uint2_kernel;
	else round_kernel = round_uint_uint_kernel;

	global_work_size[0] = tp.trim.blocks/NB * tp.trim.tpb;
	local_work_size[0] = tp.trim.tpb;
	int constRound = 0;
	edges_a = EDGES_A;
	int edges_b = EDGES_B / NB;

	const size_t bufferSize = sizeA + sizeB / NB;
	uint bufB_offset = bufferSize - sizeB;
	for(u32 i = NB; i--; ){
		uint idx0_offset = (1+i) * indexesSize / sizeof(u32);
		uint idx1_offset = i*qE;
		uint buff_offset = i*qA;
		uint tmp_buffB_offset = bufB_offset + i*qB;
		clResult |= clSetKernelArg(round_kernel, 0, sizeof (int), &constRound);
		clResult |= clSetKernelArg(round_kernel, 1, sizeof (cl_mem), (void *) &dipkeys);
		clResult |= clSetKernelArg(round_kernel, 2, sizeof (cl_mem), (void *) &bufferA);
		clResult |= clSetKernelArg(round_kernel, 3, sizeof (cl_mem), (void *) &bufferB);
		clResult |= clSetKernelArg(round_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
		clResult |= clSetKernelArg(round_kernel, 5, sizeof (cl_mem), (void *) &indexesE);
		clResult |= clSetKernelArg(round_kernel, 6, sizeof (int), &edges_a);
		clResult |= clSetKernelArg(round_kernel, 7, sizeof (int), &edges_b);
		clResult |= clSetKernelArg(round_kernel, 8, sizeof(u32), &buff_offset);	
		clResult |= clSetKernelArg(round_kernel, 9, sizeof(u32), &tmp_buffB_offset);
		clResult |= clSetKernelArg(round_kernel, 10, sizeof(u32), &idx1_offset);
		clResult |= clSetKernelArg(round_kernel, 11, sizeof(u32), &idx0_offset);
		clResult |= clSetKernelArg(round_kernel, 12, sizeof(u32), &ONE);
		clResult |= clEnqueueNDRangeKernel(commandQueue, round_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
		checkOpenclErrors(clResult);
	//	clFinish(commandQueue);
	}

	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), 0, tmpSize, 0, NULL, NULL);
	checkOpenclErrors(clResult);
//	clFinish(commandQueue);

	constRound = 1;
	uint idx_offset = indexesSize / sizeof(u32);
	uint nb = NB;
	global_work_size[0] = tp.trim.blocks * tp.trim.tpb;
	local_work_size[0] = tp.trim.tpb;
	edges_a = EDGES_B / NB;
	edges_b = EDGES_B / 2;
	if(selected != 0 || tp.expand < 2) round_kernel = round_uint2_uint2_kernel;
	else round_kernel = round_uint_uint2_kernel;
	clResult |= clSetKernelArg(round_kernel, 0, sizeof (int), &constRound);
	clResult |= clSetKernelArg(round_kernel, 1, sizeof (cl_mem), (void *) &dipkeys);
	clResult |= clSetKernelArg(round_kernel, 2, sizeof (cl_mem), (void *) &bufferB);
	clResult |= clSetKernelArg(round_kernel, 3, sizeof (cl_mem), (void *) &bufferA);
	clResult |= clSetKernelArg(round_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(round_kernel, 5, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(round_kernel, 6, sizeof (uint), &edges_a);
	clResult |= clSetKernelArg(round_kernel, 7, sizeof (uint), &edges_b);
	clResult |= clSetKernelArg(round_kernel, 8, sizeof(u32), &bufB_offset);
	clResult |= clSetKernelArg(round_kernel, 9, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(round_kernel, 10, sizeof(u32), &idx_offset);
	clResult |= clSetKernelArg(round_kernel, 11, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(round_kernel, 12, sizeof(u32), &nb);
	clResult |= clEnqueueNDRangeKernel(commandQueue, round_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
	checkOpenclErrors(clResult);
//	clFinish(commandQueue);

/*
	cl_uint2 *bufa = (cl_uint2*)malloc(sizeof(cl_uint2) * edges_b);
	u32 *idx = (u32*)malloc(indexesSize);
	clEnqueueReadBuffer(commandQueue, indexesE, CL_TRUE, 0, indexesSize, idx, 0, NULL, NULL);
	for(int i = 0; i < NX2; i++){
		idx[i] = idx[i] < edges_b ? idx[i] : edges_b;
		clEnqueueReadBuffer(commandQueue, bufferA, CL_TRUE, i*edges_b*sizeof(cl_uint2), edges_b*sizeof(cl_uint2), bufa, 0, NULL, NULL);
		for(int j = 0; j < idx[i]-1; j++){
			if(bufa[j].x !=0 && bufa[j].y !=0 && bufa[j].x == bufa[j+1].x && bufa[j].y == bufa[j+1].y){
				printf("seedB find same edge :%d, %u, %u\n", i, bufa[j].x, bufa[j].y);
				exit(0);
			}
		}
	}
	free(bufa);
	free(idx);
*/
//	clResult = clEnqueueReadBuffer(commandQueue, indexesE, CL_TRUE, 0, sizeof (u32), &nedges, 0, NULL, NULL);
//	printf("round 2 result : %d\n", nedges);
	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), indexesSize, tmpSize, 0, NULL, NULL);
	checkOpenclErrors(clResult);
//	clFinish(commandQueue);

	constRound = 2;
	edges_a = EDGES_B / 2;
	edges_b = EDGES_A / 4;
	round_kernel = round_uint2_uint2_kernel;
	clResult |= clSetKernelArg(round_kernel, 0, sizeof (int), &constRound);
	clResult |= clSetKernelArg(round_kernel, 1, sizeof (cl_mem), (void *) &dipkeys);
	clResult |= clSetKernelArg(round_kernel, 2, sizeof (cl_mem), (void *) &bufferA);
	clResult |= clSetKernelArg(round_kernel, 3, sizeof (cl_mem), (void *) &bufferB);
	clResult |= clSetKernelArg(round_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(round_kernel, 5, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(round_kernel, 6, sizeof (int), &edges_a);
	clResult |= clSetKernelArg(round_kernel, 7, sizeof (int), &edges_b);
	clResult |= clSetKernelArg(round_kernel, 8, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(round_kernel, 9, sizeof(u32), &bufB_offset);
	clResult |= clSetKernelArg(round_kernel, 10, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(round_kernel, 11, sizeof(u32), &idx_offset);
	clResult |= clSetKernelArg(round_kernel, 12, sizeof(u32), &ONE);
	clResult |= clEnqueueNDRangeKernel(commandQueue, round_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
	checkOpenclErrors(clResult);
//	clFinish(commandQueue);

//	clResult = clEnqueueReadBuffer(commandQueue, indexesE, CL_TRUE, indexesSize, sizeof (u32), &nedges, 0, NULL, NULL);
//	printf("round 3 result : %d\n", nedges);
	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), 0, tmpSize, 0, NULL, NULL);
	checkOpenclErrors(clResult);
//	clFinish(commandQueue);

	constRound = 3;
	edges_a = EDGES_A / 4;
	edges_b = EDGES_B / 4;
	clResult |= clSetKernelArg(round_kernel, 0, sizeof (int), &constRound);
	clResult |= clSetKernelArg(round_kernel, 1, sizeof (cl_mem), (void *) &dipkeys);
	clResult |= clSetKernelArg(round_kernel, 2, sizeof (cl_mem), (void *) &bufferB);
	clResult |= clSetKernelArg(round_kernel, 3, sizeof (cl_mem), (void *) &bufferA);
	clResult |= clSetKernelArg(round_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(round_kernel, 5, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(round_kernel, 6, sizeof (int), &edges_a);
	clResult |= clSetKernelArg(round_kernel, 7, sizeof (int), &edges_b);
	clResult |= clSetKernelArg(round_kernel, 8, sizeof(u32), &bufB_offset);
	clResult |= clSetKernelArg(round_kernel, 9, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(round_kernel, 10, sizeof(u32), &idx_offset);
	clResult |= clSetKernelArg(round_kernel, 11, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(round_kernel, 12, sizeof(u32), &ONE);
	clResult |= clEnqueueNDRangeKernel(commandQueue, round_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
	checkOpenclErrors(clResult);
//	clFinish(commandQueue);


//	clResult = clEnqueueReadBuffer(commandQueue, indexesE, CL_TRUE, 0, sizeof (u32), &nedges, 0, NULL, NULL);
//	printf("round 4 result : %d\n", nedges);
	for (int round = 4; round < tp.ntrims; round += 2)
	{
	    clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), indexesSize,
				tmpSize, 0, NULL, NULL);
		checkOpenclErrors(clResult);

//	    clFinish(commandQueue);

	    constRound = round;
	    edges_a = EDGES_B / 4;
	    edges_b = EDGES_B / 4;
	    clResult = clSetKernelArg(round_kernel, 0, sizeof (int), &constRound);
	    clResult |= clSetKernelArg(round_kernel, 1, sizeof (cl_mem), (void *) &dipkeys);
	    clResult |= clSetKernelArg(round_kernel, 2, sizeof (cl_mem), (void *) &bufferA);
	    clResult |= clSetKernelArg(round_kernel, 3, sizeof (cl_mem), (void *) &bufferB);
	    clResult |= clSetKernelArg(round_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
	    clResult |= clSetKernelArg(round_kernel, 5, sizeof (cl_mem), (void *) &indexesE);
	    clResult |= clSetKernelArg(round_kernel, 6, sizeof (int), &edges_a);
	    clResult |= clSetKernelArg(round_kernel, 7, sizeof (int), &edges_b);
	    clResult |= clSetKernelArg(round_kernel, 8, sizeof(u32), &ZERO);
	    clResult |= clSetKernelArg(round_kernel, 9, sizeof(u32), &bufB_offset);
		clResult |= clSetKernelArg(round_kernel, 10, sizeof(u32), &ZERO);
		clResult |= clSetKernelArg(round_kernel, 11, sizeof(u32), &idx_offset);
		clResult |= clSetKernelArg(round_kernel, 12, sizeof(u32), &ONE);
	    clResult |= clEnqueueNDRangeKernel(commandQueue, round_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);
		checkOpenclErrors(clResult);
//	    clFinish(commandQueue);

	    clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int),
				0, tmpSize, 0, NULL, NULL);
		checkOpenclErrors(clResult);
//	    clFinish(commandQueue);

	    constRound = round + 1;
	    edges_a = EDGES_B / 4;
	    edges_b = EDGES_B / 4;
	    clResult = clSetKernelArg(round_kernel, 0, sizeof (int), &constRound);
	    clResult |= clSetKernelArg(round_kernel, 1, sizeof (cl_mem), (void *) &dipkeys);
	    clResult |= clSetKernelArg(round_kernel, 2, sizeof (cl_mem), (void *) &bufferB);
	    clResult |= clSetKernelArg(round_kernel, 3, sizeof (cl_mem), (void *) &bufferA);
	    clResult |= clSetKernelArg(round_kernel, 4, sizeof (cl_mem), (void *) &indexesE);
	    clResult |= clSetKernelArg(round_kernel, 5, sizeof (cl_mem), (void *) &indexesE);
	    clResult |= clSetKernelArg(round_kernel, 6, sizeof (int), &edges_a);
	    clResult |= clSetKernelArg(round_kernel, 7, sizeof (int), &edges_b);
		clResult |= clSetKernelArg(round_kernel, 8, sizeof(u32), &bufB_offset);
		clResult |= clSetKernelArg(round_kernel, 9, sizeof(u32), &ZERO);
		clResult |= clSetKernelArg(round_kernel, 10, sizeof(u32), &idx_offset);
		clResult |= clSetKernelArg(round_kernel, 11, sizeof(u32), &ZERO);
		clResult |= clSetKernelArg(round_kernel, 12, sizeof(u32), &ONE);
	    clResult |= clEnqueueNDRangeKernel(commandQueue, round_kernel, 1, NULL,
				   global_work_size, local_work_size, 0, NULL,
				   &event);
		checkOpenclErrors(clResult);
	}

	clFinish(commandQueue);

//	clResult = clEnqueueReadBuffer(commandQueue, indexesE, CL_TRUE, 0, sizeof (u32), &nedges, 0, NULL, NULL);
//	printf("round  result : %d\n", nedges);
	clResult = clEnqueueFillBuffer(commandQueue, indexesE, &ZERO, sizeof (int), indexesSize,
			    tmpSize, 0, NULL, NULL);
	checkOpenclErrors(clResult);
	clFinish(commandQueue);
	cl_kernel tail_kernel = clCreateKernel(program, "Tail", &clResult);
	global_work_size[0] = tp.tail.blocks * tp.tail.tpb;
	local_work_size[0] = tp.tail.tpb;
	int tail_edges = DUCK_B_EDGES / 4;
	clResult |= clSetKernelArg(tail_kernel, 0, sizeof (cl_mem), (void *) &bufferA);
	clResult |= clSetKernelArg(tail_kernel, 1, sizeof (cl_mem), (void *) &bufferB);
	clResult |= clSetKernelArg(tail_kernel, 2, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(tail_kernel, 3, sizeof (cl_mem), (void *) &indexesE);
	clResult |= clSetKernelArg(tail_kernel, 4, sizeof (int), &tail_edges);
	clResult |= clSetKernelArg(tail_kernel, 5, sizeof(u32), &bufB_offset);
	clResult |= clSetKernelArg(tail_kernel, 6, sizeof(u32), &ZERO);
	clResult |= clSetKernelArg(tail_kernel, 7, sizeof(u32), &idx_offset);
	clResult |= clEnqueueNDRangeKernel(commandQueue, tail_kernel, 1, NULL,
				   global_work_size, local_work_size, 0, NULL,
				   &event);
	checkOpenclErrors(clResult);
	clFinish(commandQueue);

	clResult = clEnqueueReadBuffer(commandQueue, indexesE, CL_TRUE, indexesSize, sizeof (u32), &nedges, 0, NULL, NULL);
	checkOpenclErrors(clResult);
	clFinish(commandQueue);

//		fprintf(stderr, "Host A [0]: %zu\n", hostA[0]);
/*	cl_uint2 *tmpa = (cl_uint2*)malloc(sizeof(cl_uint2) * nedges);
//	cudaMemcpy(tmpa, bufferB, sizeof(cl_uint2)*nedges, cudaMemcpyDeviceToHost);
	clEnqueueReadBuffer(commandQueue, bufferB, CL_TRUE, bufB_offset, sizeof(cl_uint2) * nedges, tmpa, 0, NULL, NULL);
	saveFile(tmpa, nedges, "result.txt");
	free(tmpa);
*/
		printf("tail result %d\n", nedges);
	return nedges;
    }

};
