// Copyright 2016 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethdb"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/params"
)

// Some weird dependency for deploying a DAO instance.
var creatorDeployCode = common.FromHex("")

// EVM deploy bytecode of the DAO to simulate blocking.
var daoDeployCode = common.FromHex("")

// Proxy contract to whitelist interaction with:
//
// contract Proxy {
//   address _dao;
//
//   function Proxy(address dao) {
//       _dao = dao;
//   }
//   function() {
//     if (msg.value > 0) {
//       _dao.call.value(msg.value)();
//     } else {
//       _dao.call(bytes4(sha3("refund()")));
//     }
//   }
// }
var proxyDeployCode = common.FromHex("606060405260405160208060dd83395060806040525160008054600160a060020a031916821790555060a98060346000396000f360606040523615600a575b60486000341115604a576000805473ffffffffffffffffffffffffffffffffffffffff1690349060609081818185876185025a03f1925050505060a7565b005b600080547f590e1ae300000000000000000000000000000000000000000000000000000000606090815273ffffffffffffffffffffffffffffffffffffffff9091169163590e1ae3916064919060048183876161da5a03f1505050505b56")

// Tests that unannimous votes are handled correctly (i.e. the simple case).
func TestDAOForkUnanimousFail(t *testing.T) { testDAOUnanimousFork(t, false) }
func TestDAOForkUnanimousPass(t *testing.T) { testDAOUnanimousFork(t, true) }

func testDAOUnanimousFork(t *testing.T, pass bool) {
	// Reduce the test size to avoid wasting too much time
	defer func(old uint64) { ruptureBlock = old }(ruptureBlock)
	ruptureBlock = 128

	defer func(old int) { ruptureCacheLimit = old }(ruptureCacheLimit)
	ruptureCacheLimit = 256

	// Depending on the tested outcome, set a high or a low gas limit
	defer func(old *big.Int) { params.GenesisGasLimit = old }(params.GenesisGasLimit)
	defer func(old *big.Int) { params.TargetGasLimit = old }(params.TargetGasLimit)
	if pass {
		params.GenesisGasLimit = new(big.Int).Add(ruptureThreshold, big.NewInt(-10))
		params.TargetGasLimit = new(big.Int).Add(ruptureThreshold, big.NewInt(-10))
	} else {
		params.GenesisGasLimit = new(big.Int).Add(ruptureThreshold, big.NewInt(10))
		params.TargetGasLimit = new(big.Int).Add(ruptureThreshold, big.NewInt(10))
	}
	// Create a test chain with a DAO instance deployed and attempt to transact with it
	var (
		slockit, _  = crypto.HexToECDSA("49a7b37aa6f6645917e7b807e9d1c00d4fa71f18343b0d4122a4d2df64dd6fee")
		black, _    = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
		white, _    = crypto.HexToECDSA("8a1f9a8f95be41cd7ccb6168179afb4504aefe388d1e14474d32c45c72ce7b7a")
		slockitAddr = crypto.PubkeyToAddress(slockit.PublicKey)
		blackAddr   = crypto.PubkeyToAddress(black.PublicKey)
		whiteAddr   = crypto.PubkeyToAddress(white.PublicKey)
		creatorAddr common.Address
		daoAddr     common.Address
		blackProxy  common.Address
		whiteProxy  common.Address
		db, _       = ethdb.NewMemDatabase()
	)
	genesis := WriteGenesisBlockForTesting(db,
		GenesisAccount{slockitAddr, big.NewInt(1000000)},
		GenesisAccount{blackAddr, big.NewInt(1000000)},
		GenesisAccount{whiteAddr, big.NewInt(1000000)},
	)
	length := int(ruptureBlock) + 2*ruptureCacheLimit
	chain, _ := GenerateChain(genesis, db, length, func(i int, gen *BlockGen) {
		switch i {
		case 0:
			// Deploy the DAO creator in the first block
			tx, _ := types.NewContractCreation(gen.TxNonce(slockitAddr), big.NewInt(1), params.GenesisGasLimit, new(big.Int), creatorDeployCode).SignECDSA(slockit)
			gen.AddTx(tx)
			creatorAddr = crypto.CreateAddress(slockitAddr, tx.Nonce())

		case 1:
			// Deploy the DAO in the second block
			var args []byte
			args = append(args, common.LeftPadBytes(slockitAddr.Bytes(), 32)...) // curator
			args = append(args, common.LeftPadBytes(creatorAddr.Bytes(), 32)...) // daoCreator
			args = append(args, common.LeftPadBytes([]byte{0}, 32)...)           // proposalDeposit
			args = append(args, common.LeftPadBytes([]byte{100}, 32)...)         // minTokensToCreate
			args = append(args, common.LeftPadBytes([]byte{100}, 32)...)         // closingTime
			args = append(args, common.LeftPadBytes([]byte{0}, 32)...)           // privateCreation

			tx, _ := types.NewContractCreation(gen.TxNonce(slockitAddr), big.NewInt(0), params.GenesisGasLimit, new(big.Int), append(daoDeployCode, args...)).SignECDSA(slockit)
			gen.AddTx(tx)
			daoAddr = crypto.CreateAddress(slockitAddr, tx.Nonce())

		case 2:
			// Deploy the black and white hat proxy contracts
			tx, _ := types.NewContractCreation(gen.TxNonce(blackAddr), big.NewInt(1), big.NewInt(1000000), new(big.Int), append(proxyDeployCode, common.LeftPadBytes(daoAddr.Bytes(), 32)...)).SignECDSA(black)
			gen.AddTx(tx)
			blackProxy = crypto.CreateAddress(blackAddr, tx.Nonce())

			tx, _ = types.NewContractCreation(gen.TxNonce(whiteAddr), big.NewInt(1), big.NewInt(1000000), new(big.Int), append(proxyDeployCode, common.LeftPadBytes(daoAddr.Bytes(), 32)...)).SignECDSA(white)
			gen.AddTx(tx)
			whiteProxy = crypto.CreateAddress(whiteAddr, tx.Nonce())

			ruptureWhitelist[whiteProxy] = true

		case 3:
			// Fund the DAO with some funds, but not enough for successful creation
			tx, _ := types.NewTransaction(gen.TxNonce(whiteAddr), whiteProxy, big.NewInt(2), big.NewInt(1000000), nil, nil).SignECDSA(white)
			gen.AddTx(tx)

			tx, _ = types.NewTransaction(gen.TxNonce(blackAddr), blackProxy, big.NewInt(2), big.NewInt(1000000), nil, nil).SignECDSA(black)
			gen.AddTx(tx)

		case length - 2:
			// DAO creation failed by this time and forks are in effect; try retrieving whitelisted funds
			tx, _ := types.NewTransaction(gen.TxNonce(whiteAddr), whiteProxy, big.NewInt(0), big.NewInt(1000000), nil, nil).SignECDSA(white)
			gen.AddTx(tx)

		case length - 1:
			// DAO creation failed by this time and forks are in effect; try retrieving blacklisted funds
			tx, _ := types.NewTransaction(gen.TxNonce(blackAddr), blackProxy, big.NewInt(0), big.NewInt(1000000), nil, nil).SignECDSA(black)
			gen.AddTx(tx)
		}
	})
	defer delete(ruptureWhitelist, whiteProxy) // This can't be done in the aboge generator sadly

	// Import the chain. This runs all block validation rules.
	bc, _ := NewBlockChain(db, MakeChainConfig(), FakePow{}, new(event.TypeMux))
	n, err := bc.InsertChain(chain)

	// The chain should either succeed (no votes), or fail on the black address
	if !pass {
		if err != nil {
			t.Errorf("block %d rejected on non forked chain: %v", n, err)
		}
	} else {
		if n != length-1 || err != blockedCodeHashErr {
			t.Errorf("failure mismatch: have %d:%v, want %d:%v", n, err, length-1, blockedCodeHashErr)
		}
	}
	// Verify account balances to make sure transactions executd properly, not just the test is bugged
	state, _ := bc.State()
	if state.GetBalance(whiteProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund
		t.Errorf("white proxy balance mismatch: have %v, want 3", state.GetBalance(whiteProxy))
	}
	if !pass {
		if state.GetBalance(blackProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund (fork refused)
			t.Errorf("black proxy balance mismatch: have %v, want 3", state.GetBalance(blackProxy))
		}
		if state.GetBalance(daoAddr).Cmp(big.NewInt(0)) != 0 { // all refunded (fork refused)
			t.Errorf("dao balance mismatch: have %v, want 0", state.GetBalance(daoAddr))
		}
	} else {
		if state.GetBalance(blackProxy).Cmp(big.NewInt(1)) != 0 { // 1 init (refund refused due to fork)
			t.Errorf("black proxy balance mismatch: have %v, want 1", state.GetBalance(blackProxy))
		}
		if state.GetBalance(daoAddr).Cmp(big.NewInt(2)) != 0 { // 2 from black (refund refused due to fork)
			t.Errorf("dao balance mismatch: have %v, want 2", state.GetBalance(daoAddr))
		}
	}
}

// Tests the unique corner case where miners don't cleanly decide on the outcome
// of the vote, rather
func TestDAOForkRaceyResolution(t *testing.T) {
	// Reduce the test size to avoid wasting too much time
	defer func(old uint64) { ruptureBlock = old }(ruptureBlock)
	ruptureBlock = 128

	defer func(old int) { ruptureCacheLimit = old }(ruptureCacheLimit)
	ruptureCacheLimit = 256

	// Set up the parameters of the test chain
	var (
		slockit, _  = crypto.HexToECDSA("49a7b37aa6f6645917e7b807e9d1c00d4fa71f18343b0d4122a4d2df64dd6fee")
		black, _    = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
		white, _    = crypto.HexToECDSA("8a1f9a8f95be41cd7ccb6168179afb4504aefe388d1e14474d32c45c72ce7b7a")
		slockitAddr = crypto.PubkeyToAddress(slockit.PublicKey)
		blackAddr   = crypto.PubkeyToAddress(black.PublicKey)
		whiteAddr   = crypto.PubkeyToAddress(white.PublicKey)
		creatorAddr common.Address
		daoAddr     common.Address
		blackProxy  common.Address
		whiteProxy  common.Address
		db, _       = ethdb.NewMemDatabase()
	)
	defer func(old *big.Int) { params.GenesisGasLimit = old }(params.GenesisGasLimit)
	params.GenesisGasLimit = ruptureThreshold

	genesis := WriteGenesisBlockForTesting(db,
		GenesisAccount{slockitAddr, big.NewInt(1000000)},
		GenesisAccount{blackAddr, big.NewInt(1000000)},
		GenesisAccount{whiteAddr, big.NewInt(1000000)},
	)
	// Generate a chain where the outcome for the fork proposal is pass
	defer func(old *big.Int) { params.TargetGasLimit = old }(params.TargetGasLimit)
	params.TargetGasLimit = new(big.Int).Add(ruptureThreshold, big.NewInt(-10))

	length := int(ruptureBlock) + 2*ruptureCacheLimit
	chainPass, _ := GenerateChain(genesis, db, length, func(i int, gen *BlockGen) {
		switch i {
		case 0:
			// Deploy the DAO creator in the first block
			tx, _ := types.NewContractCreation(gen.TxNonce(slockitAddr), big.NewInt(1), big.NewInt(3999980), new(big.Int), creatorDeployCode).SignECDSA(slockit)
			gen.AddTx(tx)
			creatorAddr = crypto.CreateAddress(slockitAddr, tx.Nonce())

		case 1:
			// Deploy the DAO in the second block
			var args []byte
			args = append(args, common.LeftPadBytes(slockitAddr.Bytes(), 32)...) // curator
			args = append(args, common.LeftPadBytes(creatorAddr.Bytes(), 32)...) // daoCreator
			args = append(args, common.LeftPadBytes([]byte{0}, 32)...)           // proposalDeposit
			args = append(args, common.LeftPadBytes([]byte{100}, 32)...)         // minTokensToCreate
			args = append(args, common.LeftPadBytes([]byte{100}, 32)...)         // closingTime
			args = append(args, common.LeftPadBytes([]byte{0}, 32)...)           // privateCreation

			tx, _ := types.NewContractCreation(gen.TxNonce(slockitAddr), big.NewInt(0), big.NewInt(3999980), new(big.Int), append(daoDeployCode, args...)).SignECDSA(slockit)
			gen.AddTx(tx)
			daoAddr = crypto.CreateAddress(slockitAddr, tx.Nonce())

		case 2:
			// Deploy the black and white hat proxy contracts
			tx, _ := types.NewContractCreation(gen.TxNonce(blackAddr), big.NewInt(1), big.NewInt(1000000), new(big.Int), append(proxyDeployCode, common.LeftPadBytes(daoAddr.Bytes(), 32)...)).SignECDSA(black)
			gen.AddTx(tx)
			blackProxy = crypto.CreateAddress(blackAddr, tx.Nonce())

			tx, _ = types.NewContractCreation(gen.TxNonce(whiteAddr), big.NewInt(1), big.NewInt(1000000), new(big.Int), append(proxyDeployCode, common.LeftPadBytes(daoAddr.Bytes(), 32)...)).SignECDSA(white)
			gen.AddTx(tx)
			whiteProxy = crypto.CreateAddress(whiteAddr, tx.Nonce())

			ruptureWhitelist[whiteProxy] = true

		case 3:
			// Fund the DAO with some funds, but not enough for successful creation
			tx, _ := types.NewTransaction(gen.TxNonce(whiteAddr), whiteProxy, big.NewInt(2), big.NewInt(1000000), nil, nil).SignECDSA(white)
			gen.AddTx(tx)

			tx, _ = types.NewTransaction(gen.TxNonce(blackAddr), blackProxy, big.NewInt(2), big.NewInt(1000000), nil, nil).SignECDSA(black)
			gen.AddTx(tx)

		case length - 2:
			// DAO creation failed by this time and forks are in effect; try retrieving whitelisted funds
			tx, _ := types.NewTransaction(gen.TxNonce(whiteAddr), whiteProxy, big.NewInt(0), big.NewInt(1000000), nil, nil).SignECDSA(white)
			gen.AddTx(tx)

		case length - 1:
			// DAO creation failed by this time and forks are in effect; try retrieving blacklisted funds
			tx, _ := types.NewTransaction(gen.TxNonce(blackAddr), blackProxy, big.NewInt(0), big.NewInt(1000000), nil, nil).SignECDSA(black)
			gen.AddTx(tx)
		}
	})
	// Generate a chain to work around the last bad block above
	chainPassCont, _ := GenerateChain(chainPass[len(chainPass)-2], db, 3, func(i int, gen *BlockGen) {})

	// Generate a fork of the chain where the outcome of the fork proposal is fail
	params.TargetGasLimit = new(big.Int).Add(ruptureThreshold, big.NewInt(10))
	chainFail, _ := GenerateChain(chainPass[4], db, length-4, func(i int, gen *BlockGen) { // Start fro block #4 to reuse previous creation code
		switch i {
		case length - 4 - 2:
			// DAO creation failed by this time and forks are in effect; try retrieving whitelisted funds
			tx, _ := types.NewTransaction(gen.TxNonce(whiteAddr), whiteProxy, big.NewInt(0), big.NewInt(1000000), nil, nil).SignECDSA(white)
			gen.AddTx(tx)

		case length - 4 - 1:
			// DAO creation failed by this time and forks are in effect; try retrieving blacklisted funds
			tx, _ := types.NewTransaction(gen.TxNonce(blackAddr), blackProxy, big.NewInt(0), big.NewInt(1000000), nil, nil).SignECDSA(black)
			gen.AddTx(tx)
		}
	})
	defer delete(ruptureWhitelist, whiteProxy) // This can't be done in the aboge generator sadly

	// Import the chain where the vote passed
	bc, _ := NewBlockChain(db, MakeChainConfig(), FakePow{}, new(event.TypeMux))

	if n, err := bc.InsertChain(chainPass); n != length-1 || err != blockedCodeHashErr {
		t.Fatalf("forked chain error mismatch: have %v/%v, want %v/%v", n, err, length-1, blockedCodeHashErr)
	}
	state, _ := bc.State()
	if state.GetBalance(whiteProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund
		t.Errorf("white proxy balance mismatch: have %v, want 3", state.GetBalance(whiteProxy))
	}
	if state.GetBalance(blackProxy).Cmp(big.NewInt(1)) != 0 { // 1 init (no refund on the passing chain)
		t.Errorf("black proxy balance mismatch: have %v, want 1", state.GetBalance(blackProxy))
	}
	if state.GetBalance(daoAddr).Cmp(big.NewInt(2)) != 0 { // 2 from black (refund refused due to fork)
		t.Errorf("dao balance mismatch: have %v, want 2", state.GetBalance(daoAddr))
	}
	// Import the chain where the vote failed (longer than the passing with 1 block (dropped from the passing))
	if _, err := bc.InsertChain(chainFail); err != nil {
		t.Fatalf("failed to import non-forked chain: %v", err)
	}
	state, _ = bc.State()
	if state.GetBalance(whiteProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund
		t.Errorf("white proxy balance mismatch: have %v, want 3", state.GetBalance(whiteProxy))
	}
	if state.GetBalance(blackProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund (fork refused)
		t.Errorf("black proxy balance mismatch: have %v, want 3", state.GetBalance(blackProxy))
	}
	if state.GetBalance(daoAddr).Cmp(big.NewInt(0)) != 0 { // all refunded (fork refused)
		t.Errorf("dao balance mismatch: have %v, want 0", state.GetBalance(daoAddr))
	}
	// Try to import a bad block on theforked chain to make sure no cache screwes up
	if _, err := bc.InsertChain(chainPass[len(chainPass)-2:]); err != blockedCodeHashErr {
		t.Fatalf("forked chain error mismatch: have %v, want %v", err, blockedCodeHashErr)
	}
	// The balances must still be that of the failed chain
	state, _ = bc.State()
	if state.GetBalance(whiteProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund
		t.Errorf("white proxy balance mismatch: have %v, want 3", state.GetBalance(whiteProxy))
	}
	if state.GetBalance(blackProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund (fork refused)
		t.Errorf("black proxy balance mismatch: have %v, want 3", state.GetBalance(blackProxy))
	}
	if state.GetBalance(daoAddr).Cmp(big.NewInt(0)) != 0 { // all refunded (fork refused)
		t.Errorf("dao balance mismatch: have %v, want 0", state.GetBalance(daoAddr))
	}
	// Overrule the passing chain with fresh blocks
	if _, err := bc.InsertChain(chainPassCont); err != nil {
		t.Fatalf("failed to import forked chain continuation: %v", err)
	}
	// Balances must be switched over to the forked version
	state, _ = bc.State()
	if state.GetBalance(whiteProxy).Cmp(big.NewInt(3)) != 0 { // 1 init + 2 refund
		t.Errorf("white proxy balance mismatch: have %v, want 3", state.GetBalance(whiteProxy))
	}
	if state.GetBalance(blackProxy).Cmp(big.NewInt(1)) != 0 { // 1 init (no refund on the passing chain)
		t.Errorf("black proxy balance mismatch: have %v, want 1", state.GetBalance(blackProxy))
	}
	if state.GetBalance(daoAddr).Cmp(big.NewInt(2)) != 0 { // 2 from black (refund refused due to fork)
		t.Errorf("dao balance mismatch: have %v, want 2", state.GetBalance(daoAddr))
	}
}
