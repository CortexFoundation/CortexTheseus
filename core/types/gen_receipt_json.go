// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

func (r Receipt) MarshalJSON() ([]byte, error) {
	type ReceiptJSON struct {
		PostState         hexutil.Bytes  `json:"root"`
		CumulativeGasUsed *hexutil.Big   `json:"cumulativeGasUsed"`
		Bloom             Bloom          `json:"logsBloom"`
		Logs              []*Log         `json:"logs"`
		TxHash            common.Hash    `json:"transactionHash"`
		ContractAddress   common.Address `json:"contractAddress" optional:"true"`
		GasUsed           *hexutil.Big   `json:"gasUsed"`
	}
	var enc ReceiptJSON
	enc.PostState = r.PostState
	enc.CumulativeGasUsed = (*hexutil.Big)(r.CumulativeGasUsed)
	enc.Bloom = r.Bloom
	enc.Logs = r.Logs
	enc.TxHash = r.TxHash
	enc.ContractAddress = r.ContractAddress
	enc.GasUsed = (*hexutil.Big)(r.GasUsed)
	return json.Marshal(&enc)
}

func (r *Receipt) UnmarshalJSON(input []byte) error {
	type ReceiptJSON struct {
		PostState         hexutil.Bytes   `json:"root"`
		CumulativeGasUsed *hexutil.Big    `json:"cumulativeGasUsed"`
		Bloom             *Bloom          `json:"logsBloom"`
		Logs              []*Log          `json:"logs"`
		TxHash            *common.Hash    `json:"transactionHash"`
		ContractAddress   *common.Address `json:"contractAddress" optional:"true"`
		GasUsed           *hexutil.Big    `json:"gasUsed"`
	}
	var dec ReceiptJSON
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	var x Receipt
	if dec.PostState == nil {
		return errors.New("missing required field 'root' for Receipt")
	}
	x.PostState = dec.PostState
	if dec.CumulativeGasUsed == nil {
		return errors.New("missing required field 'cumulativeGasUsed' for Receipt")
	}
	x.CumulativeGasUsed = (*big.Int)(dec.CumulativeGasUsed)
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Receipt")
	}
	x.Bloom = *dec.Bloom
	if dec.Logs == nil {
		return errors.New("missing required field 'logs' for Receipt")
	}
	x.Logs = dec.Logs
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	x.TxHash = *dec.TxHash
	if dec.ContractAddress != nil {
		x.ContractAddress = *dec.ContractAddress
	}
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Receipt")
	}
	x.GasUsed = (*big.Int)(dec.GasUsed)
	*r = x
	return nil
}
