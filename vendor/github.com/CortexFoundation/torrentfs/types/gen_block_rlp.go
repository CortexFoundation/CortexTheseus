// Code generated by rlpgen. DO NOT EDIT.

package types

import "github.com/CortexFoundation/CortexTheseus/rlp"
import "io"

func (obj *Block) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	w.WriteUint64(obj.Number)
	w.WriteBytes(obj.Hash[:])
	_tmp1 := w.List()
	for _, _tmp2 := range obj.Txs {
		_tmp3 := w.List()
		if _tmp2.Amount == nil {
			w.Write(rlp.EmptyString)
		} else {
			if _tmp2.Amount.Sign() == -1 {
				return rlp.ErrNegativeBigInt
			}
			w.WriteBigInt(_tmp2.Amount)
		}
		w.WriteUint64(_tmp2.GasLimit)
		w.WriteBytes(_tmp2.Payload)
		if _tmp2.Recipient == nil {
			w.Write([]byte{0x80})
		} else {
			w.WriteBytes(_tmp2.Recipient[:])
		}
		if _tmp2.Hash == nil {
			w.Write([]byte{0x80})
		} else {
			w.WriteBytes(_tmp2.Hash[:])
		}
		w.ListEnd(_tmp3)
	}
	w.ListEnd(_tmp1)
	w.ListEnd(_tmp0)
	return w.Flush()
}
