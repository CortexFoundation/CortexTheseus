// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/CortexFoundation/CortexTheseus/common"
)

// MarshalJSON marshals as JSON.
func (m ModelMeta) MarshalJSON() ([]byte, error) {
	type ModelMeta struct {
		Comment       string         `json:"comment"`
		Hash          common.Address `json:"hash"`
		RawSize       uint64         `json:"rawSize"`
		InputShape    []uint64       `json:"inputShape"`
		OutputShape   []uint64       `json:"outputShape"`
		Gas           uint64         `json:"gas"`
		AuthorAddress common.Address `json:"authorAddress"`
		BlockNum      big.Int        `json:"blockNum"`
	}
	var enc ModelMeta
	enc.Comment = m.Comment
	enc.Hash = m.Hash
	enc.RawSize = m.RawSize
	enc.InputShape = m.InputShape
	enc.OutputShape = m.OutputShape
	enc.Gas = m.Gas
	enc.AuthorAddress = m.AuthorAddress
	enc.BlockNum = m.BlockNum
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (m *ModelMeta) UnmarshalJSON(input []byte) error {
	type ModelMeta struct {
		Comment       *string         `json:"comment"`
		Hash          *common.Address `json:"hash"`
		RawSize       *uint64         `json:"rawSize"`
		InputShape    []uint64        `json:"inputShape"`
		OutputShape   []uint64        `json:"outputShape"`
		Gas           *uint64         `json:"gas"`
		AuthorAddress *common.Address `json:"authorAddress"`
		BlockNum      *big.Int        `json:"blockNum"`
	}
	var dec ModelMeta
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Comment != nil {
		m.Comment = *dec.Comment
	}
	if dec.Hash != nil {
		m.Hash = *dec.Hash
	}
	if dec.RawSize != nil {
		m.RawSize = *dec.RawSize
	}
	if dec.InputShape != nil {
		m.InputShape = dec.InputShape
	}
	if dec.OutputShape != nil {
		m.OutputShape = dec.OutputShape
	}
	if dec.Gas != nil {
		m.Gas = *dec.Gas
	}
	if dec.AuthorAddress != nil {
		m.AuthorAddress = *dec.AuthorAddress
	}
	if dec.BlockNum != nil {
		m.BlockNum = *dec.BlockNum
	}
	return nil
}
