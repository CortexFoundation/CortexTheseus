// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package inference

import (
	"encoding/json"
	"errors"
)

// MarshalJSON marshals as JSON.
func (g GasWork) MarshalJSON() ([]byte, error) {
	type GasWork struct {
		Type         InferType `json:"type" gencodec:"required"`
		Model        string    `json:"model" gencodec:"required"`
		ModelSize    uint64    `json:"modelSize"`
		CvmNetworkId int64     `json:"cvm_networkid"`
	}
	var enc GasWork
	enc.Type = g.Type
	enc.Model = g.Model
	enc.ModelSize = g.ModelSize
	enc.CvmNetworkId = g.CvmNetworkId
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GasWork) UnmarshalJSON(input []byte) error {
	type GasWork struct {
		Type         *InferType `json:"type" gencodec:"required"`
		Model        *string    `json:"model" gencodec:"required"`
		ModelSize    *uint64    `json:"modelSize"`
		CvmNetworkId *int64     `json:"cvm_networkid"`
	}
	var dec GasWork
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type == nil {
		return errors.New("missing required field 'type' for GasWork")
	}
	g.Type = *dec.Type
	if dec.Model == nil {
		return errors.New("missing required field 'model' for GasWork")
	}
	g.Model = *dec.Model
	if dec.ModelSize != nil {
		g.ModelSize = *dec.ModelSize
	}
	if dec.CvmNetworkId != nil {
		g.CvmNetworkId = *dec.CvmNetworkId
	}
	return nil
}
