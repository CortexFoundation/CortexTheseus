// Code generated by "stringer -type=operation -trimprefix=op"; DO NOT EDIT.

package gogrep

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opNode-1]
	_ = x[opNamedNode-2]
	_ = x[opNodeSeq-3]
	_ = x[opNamedNodeSeq-4]
	_ = x[opOptNode-5]
	_ = x[opNamedOptNode-6]
	_ = x[opFieldNode-7]
	_ = x[opNamedFieldNode-8]
	_ = x[opMultiStmt-9]
	_ = x[opMultiExpr-10]
	_ = x[opMultiDecl-11]
	_ = x[opEnd-12]
	_ = x[opBasicLit-13]
	_ = x[opStrictIntLit-14]
	_ = x[opStrictFloatLit-15]
	_ = x[opStrictCharLit-16]
	_ = x[opStrictStringLit-17]
	_ = x[opStrictComplexLit-18]
	_ = x[opIdent-19]
	_ = x[opPkg-20]
	_ = x[opIndexExpr-21]
	_ = x[opSliceExpr-22]
	_ = x[opSliceFromExpr-23]
	_ = x[opSliceToExpr-24]
	_ = x[opSliceFromToExpr-25]
	_ = x[opSliceToCapExpr-26]
	_ = x[opSliceFromToCapExpr-27]
	_ = x[opFuncLit-28]
	_ = x[opCompositeLit-29]
	_ = x[opTypedCompositeLit-30]
	_ = x[opSimpleSelectorExpr-31]
	_ = x[opSelectorExpr-32]
	_ = x[opTypeAssertExpr-33]
	_ = x[opTypeSwitchAssertExpr-34]
	_ = x[opStructType-35]
	_ = x[opInterfaceType-36]
	_ = x[opEfaceType-37]
	_ = x[opVoidFuncType-38]
	_ = x[opGenericVoidFuncType-39]
	_ = x[opFuncType-40]
	_ = x[opGenericFuncType-41]
	_ = x[opArrayType-42]
	_ = x[opSliceType-43]
	_ = x[opMapType-44]
	_ = x[opChanType-45]
	_ = x[opKeyValueExpr-46]
	_ = x[opEllipsis-47]
	_ = x[opTypedEllipsis-48]
	_ = x[opStarExpr-49]
	_ = x[opUnaryExpr-50]
	_ = x[opBinaryExpr-51]
	_ = x[opParenExpr-52]
	_ = x[opArgList-53]
	_ = x[opSimpleArgList-54]
	_ = x[opVariadicCallExpr-55]
	_ = x[opNonVariadicCallExpr-56]
	_ = x[opMaybeVariadicCallExpr-57]
	_ = x[opCallExpr-58]
	_ = x[opAssignStmt-59]
	_ = x[opMultiAssignStmt-60]
	_ = x[opBranchStmt-61]
	_ = x[opSimpleLabeledBranchStmt-62]
	_ = x[opLabeledBranchStmt-63]
	_ = x[opSimpleLabeledStmt-64]
	_ = x[opLabeledStmt-65]
	_ = x[opBlockStmt-66]
	_ = x[opExprStmt-67]
	_ = x[opGoStmt-68]
	_ = x[opDeferStmt-69]
	_ = x[opSendStmt-70]
	_ = x[opEmptyStmt-71]
	_ = x[opIncDecStmt-72]
	_ = x[opReturnStmt-73]
	_ = x[opIfStmt-74]
	_ = x[opIfInitStmt-75]
	_ = x[opIfElseStmt-76]
	_ = x[opIfInitElseStmt-77]
	_ = x[opIfNamedOptStmt-78]
	_ = x[opIfNamedOptElseStmt-79]
	_ = x[opSwitchStmt-80]
	_ = x[opSwitchTagStmt-81]
	_ = x[opSwitchInitStmt-82]
	_ = x[opSwitchInitTagStmt-83]
	_ = x[opSelectStmt-84]
	_ = x[opTypeSwitchStmt-85]
	_ = x[opTypeSwitchInitStmt-86]
	_ = x[opCaseClause-87]
	_ = x[opDefaultCaseClause-88]
	_ = x[opCommClause-89]
	_ = x[opDefaultCommClause-90]
	_ = x[opForStmt-91]
	_ = x[opForPostStmt-92]
	_ = x[opForCondStmt-93]
	_ = x[opForCondPostStmt-94]
	_ = x[opForInitStmt-95]
	_ = x[opForInitPostStmt-96]
	_ = x[opForInitCondStmt-97]
	_ = x[opForInitCondPostStmt-98]
	_ = x[opRangeStmt-99]
	_ = x[opRangeKeyStmt-100]
	_ = x[opRangeKeyValueStmt-101]
	_ = x[opRangeClause-102]
	_ = x[opRangeHeader-103]
	_ = x[opRangeKeyHeader-104]
	_ = x[opRangeKeyValueHeader-105]
	_ = x[opFieldList-106]
	_ = x[opUnnamedField-107]
	_ = x[opSimpleField-108]
	_ = x[opField-109]
	_ = x[opMultiField-110]
	_ = x[opValueSpec-111]
	_ = x[opValueInitSpec-112]
	_ = x[opTypedValueInitSpec-113]
	_ = x[opTypedValueSpec-114]
	_ = x[opSimpleTypeSpec-115]
	_ = x[opTypeSpec-116]
	_ = x[opGenericTypeSpec-117]
	_ = x[opTypeAliasSpec-118]
	_ = x[opSimpleFuncDecl-119]
	_ = x[opFuncDecl-120]
	_ = x[opMethodDecl-121]
	_ = x[opFuncProtoDecl-122]
	_ = x[opMethodProtoDecl-123]
	_ = x[opDeclStmt-124]
	_ = x[opConstDecl-125]
	_ = x[opVarDecl-126]
	_ = x[opTypeDecl-127]
	_ = x[opAnyImportDecl-128]
	_ = x[opImportDecl-129]
	_ = x[opEmptyPackage-130]
}

const _operation_name = "InvalidNodeNamedNodeNodeSeqNamedNodeSeqOptNodeNamedOptNodeFieldNodeNamedFieldNodeMultiStmtMultiExprMultiDeclEndBasicLitStrictIntLitStrictFloatLitStrictCharLitStrictStringLitStrictComplexLitIdentPkgIndexExprSliceExprSliceFromExprSliceToExprSliceFromToExprSliceToCapExprSliceFromToCapExprFuncLitCompositeLitTypedCompositeLitSimpleSelectorExprSelectorExprTypeAssertExprTypeSwitchAssertExprStructTypeInterfaceTypeEfaceTypeVoidFuncTypeGenericVoidFuncTypeFuncTypeGenericFuncTypeArrayTypeSliceTypeMapTypeChanTypeKeyValueExprEllipsisTypedEllipsisStarExprUnaryExprBinaryExprParenExprArgListSimpleArgListVariadicCallExprNonVariadicCallExprMaybeVariadicCallExprCallExprAssignStmtMultiAssignStmtBranchStmtSimpleLabeledBranchStmtLabeledBranchStmtSimpleLabeledStmtLabeledStmtBlockStmtExprStmtGoStmtDeferStmtSendStmtEmptyStmtIncDecStmtReturnStmtIfStmtIfInitStmtIfElseStmtIfInitElseStmtIfNamedOptStmtIfNamedOptElseStmtSwitchStmtSwitchTagStmtSwitchInitStmtSwitchInitTagStmtSelectStmtTypeSwitchStmtTypeSwitchInitStmtCaseClauseDefaultCaseClauseCommClauseDefaultCommClauseForStmtForPostStmtForCondStmtForCondPostStmtForInitStmtForInitPostStmtForInitCondStmtForInitCondPostStmtRangeStmtRangeKeyStmtRangeKeyValueStmtRangeClauseRangeHeaderRangeKeyHeaderRangeKeyValueHeaderFieldListUnnamedFieldSimpleFieldFieldMultiFieldValueSpecValueInitSpecTypedValueInitSpecTypedValueSpecSimpleTypeSpecTypeSpecGenericTypeSpecTypeAliasSpecSimpleFuncDeclFuncDeclMethodDeclFuncProtoDeclMethodProtoDeclDeclStmtConstDeclVarDeclTypeDeclAnyImportDeclImportDeclEmptyPackage"

var _operation_index = [...]uint16{0, 7, 11, 20, 27, 39, 46, 58, 67, 81, 90, 99, 108, 111, 119, 131, 145, 158, 173, 189, 194, 197, 206, 215, 228, 239, 254, 268, 286, 293, 305, 322, 340, 352, 366, 386, 396, 409, 418, 430, 449, 457, 472, 481, 490, 497, 505, 517, 525, 538, 546, 555, 565, 574, 581, 594, 610, 629, 650, 658, 668, 683, 693, 716, 733, 750, 761, 770, 778, 784, 793, 801, 810, 820, 830, 836, 846, 856, 870, 884, 902, 912, 925, 939, 956, 966, 980, 998, 1008, 1025, 1035, 1052, 1059, 1070, 1081, 1096, 1107, 1122, 1137, 1156, 1165, 1177, 1194, 1205, 1216, 1230, 1249, 1258, 1270, 1281, 1286, 1296, 1305, 1318, 1336, 1350, 1364, 1372, 1387, 1400, 1414, 1422, 1432, 1445, 1460, 1468, 1477, 1484, 1492, 1505, 1515, 1527}

func (i operation) String() string {
	if i >= operation(len(_operation_index)-1) {
		return "operation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operation_name[_operation_index[i]:_operation_index[i+1]]
}
