//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24786619
// Driver 390.87
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_61, texmode_independent
.address_size 64

	// .globl	Recovery
// Recovery$nonces has been demoted
// SeedA$tmp has been demoted
// SeedA$counters has been demoted
// SeedB$tmp has been demoted
// SeedB$counters has been demoted
// Round$ecounters has been demoted
// Tail$destIdx has been demoted

.entry Recovery(
	.param .u64 .ptr .const .align 8 Recovery_param_0,
	.param .u64 .ptr .global .align 4 Recovery_param_1,
	.param .u64 .ptr .const .align 8 Recovery_param_2
)
{
	.reg .pred 	%p<42>;
	.reg .b32 	%r<260>;
	.reg .b64 	%rd<187>;
	// demoted variable
	.shared .align 4 .b8 Recovery$nonces[48];

	ld.param.u64 	%rd9, [Recovery_param_0];
	ld.param.u64 	%rd11, [Recovery_param_2];
	mov.b32	%r35, %envreg3;
	mov.u32 	%r36, %ctaid.x;
	mov.u32 	%r37, %ntid.x;
	mad.lo.s32 	%r1, %r36, %r37, %r35;
	mov.u32 	%r2, %tid.x;
	mov.b32	%r38, %envreg6;
	mul.lo.s32 	%r39, %r37, %r38;
	mov.u32 	%r40, 268435456;
	div.u32 	%r3, %r40, %r39;
	mul.wide.s32 	%rd12, %r2, 4;
	mov.u64 	%rd13, Recovery$nonces;
	add.s64 	%rd2, %rd13, %rd12;
	setp.gt.s32	%p2, %r2, 11;
	@%p2 bra 	BB0_2;

	mov.u32 	%r41, 0;
	st.shared.u32 	[%rd2], %r41;

BB0_2:
	bar.sync 	0;
	setp.eq.s32	%p3, %r3, 0;
	@%p3 bra 	BB0_29;

	add.s32 	%r43, %r1, %r2;
	mul.lo.s32 	%r4, %r3, %r43;
	ld.const.u64 	%rd3, [%rd9+16];
	ld.const.u64 	%rd14, [%rd9];
	ld.const.u64 	%rd15, [%rd9+8];
	add.s64 	%rd16, %rd14, %rd15;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r44}, %rd15;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r45,%dummy}, %rd15;
	}
	shf.l.wrap.b32 	%r46, %r45, %r44, 13;
	shf.l.wrap.b32 	%r47, %r44, %r45, 13;
	mov.b64 	%rd17, {%r47, %r46};
	ld.const.u64 	%rd4, [%rd9+24];
	shr.u64 	%rd5, %rd4, 48;
	xor.b64  	%rd6, %rd17, %rd16;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd16, 32;
	shr.b64 	%rhs, %rd16, 32;
	add.u64 	%rd7, %lhs, %rhs;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r48}, %rd6;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r49,%dummy}, %rd6;
	}
	shf.l.wrap.b32 	%r50, %r49, %r48, 17;
	shf.l.wrap.b32 	%r51, %r48, %r49, 17;
	mov.b64 	%rd8, {%r51, %r50};
	ld.const.v2.u32 	{%r52, %r53}, [%rd11];
	ld.const.v2.u32 	{%r54, %r55}, [%rd11+8];
	ld.const.v2.u32 	{%r56, %r57}, [%rd11+16];
	ld.const.v2.u32 	{%r58, %r59}, [%rd11+24];
	ld.const.v2.u32 	{%r60, %r61}, [%rd11+32];
	ld.const.v2.u32 	{%r62, %r63}, [%rd11+40];
	ld.const.v2.u32 	{%r64, %r65}, [%rd11+48];
	ld.const.v2.u32 	{%r66, %r67}, [%rd11+56];
	ld.const.v2.u32 	{%r68, %r69}, [%rd11+64];
	ld.const.v2.u32 	{%r70, %r71}, [%rd11+72];
	ld.const.v2.u32 	{%r72, %r73}, [%rd11+80];
	ld.const.v2.u32 	{%r74, %r75}, [%rd11+88];
	mov.u32 	%r259, 0;

BB0_4:
	add.s32 	%r30, %r259, %r4;
	shl.b32 	%r76, %r30, 1;
	cvt.u64.u32	%rd18, %r76;
	xor.b64  	%rd19, %rd4, %rd18;
	add.s64 	%rd20, %rd3, %rd19;
	shl.b64 	%rd21, %rd19, 16;
	or.b64  	%rd22, %rd21, %rd5;
	xor.b64  	%rd23, %rd22, %rd20;
	add.s64 	%rd24, %rd6, %rd20;
	add.s64 	%rd25, %rd7, %rd23;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r77}, %rd23;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r78,%dummy}, %rd23;
	}
	shf.l.wrap.b32 	%r79, %r78, %r77, 21;
	shf.l.wrap.b32 	%r80, %r77, %r78, 21;
	mov.b64 	%rd26, {%r80, %r79};
	xor.b64  	%rd27, %rd24, %rd8;
	xor.b64  	%rd28, %rd25, %rd26;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd24, 32;
	shr.b64 	%rhs, %rd24, 32;
	add.u64 	%rd29, %lhs, %rhs;
	}
	add.s64 	%rd30, %rd25, %rd27;
	add.s64 	%rd31, %rd29, %rd28;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r81}, %rd27;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r82,%dummy}, %rd27;
	}
	shf.l.wrap.b32 	%r83, %r82, %r81, 13;
	shf.l.wrap.b32 	%r84, %r81, %r82, 13;
	mov.b64 	%rd32, {%r84, %r83};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r85}, %rd28;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r86,%dummy}, %rd28;
	}
	shf.l.wrap.b32 	%r87, %r86, %r85, 16;
	shf.l.wrap.b32 	%r88, %r85, %r86, 16;
	mov.b64 	%rd33, {%r88, %r87};
	xor.b64  	%rd34, %rd30, %rd32;
	xor.b64  	%rd35, %rd31, %rd33;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd30, 32;
	shr.b64 	%rhs, %rd30, 32;
	add.u64 	%rd36, %lhs, %rhs;
	}
	add.s64 	%rd37, %rd31, %rd34;
	add.s64 	%rd38, %rd36, %rd35;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r89}, %rd34;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r90,%dummy}, %rd34;
	}
	shf.l.wrap.b32 	%r91, %r90, %r89, 17;
	shf.l.wrap.b32 	%r92, %r89, %r90, 17;
	mov.b64 	%rd39, {%r92, %r91};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r93}, %rd35;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r94,%dummy}, %rd35;
	}
	shf.l.wrap.b32 	%r95, %r94, %r93, 21;
	shf.l.wrap.b32 	%r96, %r93, %r94, 21;
	mov.b64 	%rd40, {%r96, %r95};
	xor.b64  	%rd41, %rd37, %rd39;
	xor.b64  	%rd42, %rd38, %rd40;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd37, 32;
	shr.b64 	%rhs, %rd37, 32;
	add.u64 	%rd43, %lhs, %rhs;
	}
	xor.b64  	%rd44, %rd38, %rd18;
	xor.b64  	%rd45, %rd43, 255;
	add.s64 	%rd46, %rd44, %rd41;
	add.s64 	%rd47, %rd45, %rd42;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r97}, %rd41;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r98,%dummy}, %rd41;
	}
	shf.l.wrap.b32 	%r99, %r98, %r97, 13;
	shf.l.wrap.b32 	%r100, %r97, %r98, 13;
	mov.b64 	%rd48, {%r100, %r99};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r101}, %rd42;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r102,%dummy}, %rd42;
	}
	shf.l.wrap.b32 	%r103, %r102, %r101, 16;
	shf.l.wrap.b32 	%r104, %r101, %r102, 16;
	mov.b64 	%rd49, {%r104, %r103};
	xor.b64  	%rd50, %rd46, %rd48;
	xor.b64  	%rd51, %rd47, %rd49;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd46, 32;
	shr.b64 	%rhs, %rd46, 32;
	add.u64 	%rd52, %lhs, %rhs;
	}
	add.s64 	%rd53, %rd47, %rd50;
	add.s64 	%rd54, %rd52, %rd51;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r105}, %rd50;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r106,%dummy}, %rd50;
	}
	shf.l.wrap.b32 	%r107, %r106, %r105, 17;
	shf.l.wrap.b32 	%r108, %r105, %r106, 17;
	mov.b64 	%rd55, {%r108, %r107};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r109}, %rd51;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r110,%dummy}, %rd51;
	}
	shf.l.wrap.b32 	%r111, %r110, %r109, 21;
	shf.l.wrap.b32 	%r112, %r109, %r110, 21;
	mov.b64 	%rd56, {%r112, %r111};
	xor.b64  	%rd57, %rd53, %rd55;
	xor.b64  	%rd58, %rd54, %rd56;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd53, 32;
	shr.b64 	%rhs, %rd53, 32;
	add.u64 	%rd59, %lhs, %rhs;
	}
	add.s64 	%rd60, %rd54, %rd57;
	add.s64 	%rd61, %rd59, %rd58;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r113}, %rd57;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r114,%dummy}, %rd57;
	}
	shf.l.wrap.b32 	%r115, %r114, %r113, 13;
	shf.l.wrap.b32 	%r116, %r113, %r114, 13;
	mov.b64 	%rd62, {%r116, %r115};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r117}, %rd58;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r118,%dummy}, %rd58;
	}
	shf.l.wrap.b32 	%r119, %r118, %r117, 16;
	shf.l.wrap.b32 	%r120, %r117, %r118, 16;
	mov.b64 	%rd63, {%r120, %r119};
	xor.b64  	%rd64, %rd60, %rd62;
	xor.b64  	%rd65, %rd61, %rd63;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd60, 32;
	shr.b64 	%rhs, %rd60, 32;
	add.u64 	%rd66, %lhs, %rhs;
	}
	add.s64 	%rd67, %rd61, %rd64;
	add.s64 	%rd68, %rd66, %rd65;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r121}, %rd64;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r122,%dummy}, %rd64;
	}
	shf.l.wrap.b32 	%r123, %r122, %r121, 17;
	shf.l.wrap.b32 	%r124, %r121, %r122, 17;
	mov.b64 	%rd69, {%r124, %r123};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r125}, %rd65;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r126,%dummy}, %rd65;
	}
	shf.l.wrap.b32 	%r127, %r126, %r125, 21;
	shf.l.wrap.b32 	%r128, %r125, %r126, 21;
	mov.b64 	%rd70, {%r128, %r127};
	xor.b64  	%rd71, %rd67, %rd69;
	xor.b64  	%rd72, %rd68, %rd70;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd67, 32;
	shr.b64 	%rhs, %rd67, 32;
	add.u64 	%rd73, %lhs, %rhs;
	}
	add.s64 	%rd74, %rd68, %rd71;
	add.s64 	%rd75, %rd73, %rd72;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r129}, %rd71;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r130,%dummy}, %rd71;
	}
	shf.l.wrap.b32 	%r131, %r130, %r129, 13;
	shf.l.wrap.b32 	%r132, %r129, %r130, 13;
	mov.b64 	%rd76, {%r132, %r131};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r133}, %rd72;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r134,%dummy}, %rd72;
	}
	shf.l.wrap.b32 	%r135, %r134, %r133, 16;
	shf.l.wrap.b32 	%r136, %r133, %r134, 16;
	mov.b64 	%rd77, {%r136, %r135};
	xor.b64  	%rd78, %rd74, %rd76;
	xor.b64  	%rd79, %rd75, %rd77;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd74, 32;
	shr.b64 	%rhs, %rd74, 32;
	add.u64 	%rd80, %lhs, %rhs;
	}
	add.s64 	%rd81, %rd75, %rd78;
	add.s64 	%rd82, %rd80, %rd79;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r137}, %rd78;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r138,%dummy}, %rd78;
	}
	shf.l.wrap.b32 	%r139, %r138, %r137, 17;
	shf.l.wrap.b32 	%r140, %r137, %r138, 17;
	mov.b64 	%rd83, {%r140, %r139};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r141}, %rd79;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r142,%dummy}, %rd79;
	}
	shf.l.wrap.b32 	%r143, %r142, %r141, 21;
	shf.l.wrap.b32 	%r144, %r141, %r142, 21;
	mov.b64 	%rd84, {%r144, %r143};
	xor.b64  	%rd85, %rd81, %rd83;
	xor.b64  	%rd86, %rd82, %rd84;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd81, 32;
	shr.b64 	%rhs, %rd81, 32;
	add.u64 	%rd87, %lhs, %rhs;
	}
	add.s64 	%rd88, %rd82, %rd85;
	add.s64 	%rd89, %rd87, %rd86;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r145}, %rd85;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r146,%dummy}, %rd85;
	}
	shf.l.wrap.b32 	%r147, %r146, %r145, 13;
	shf.l.wrap.b32 	%r148, %r145, %r146, 13;
	mov.b64 	%rd90, {%r148, %r147};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r149}, %rd86;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r150,%dummy}, %rd86;
	}
	shf.l.wrap.b32 	%r151, %r150, %r149, 16;
	shf.l.wrap.b32 	%r152, %r149, %r150, 16;
	mov.b64 	%rd91, {%r152, %r151};
	xor.b64  	%rd92, %rd88, %rd90;
	xor.b64  	%rd93, %rd89, %rd91;
	add.s64 	%rd94, %rd89, %rd92;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r153}, %rd92;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r154,%dummy}, %rd92;
	}
	shf.l.wrap.b32 	%r155, %r154, %r153, 17;
	shf.l.wrap.b32 	%r156, %r153, %r154, 17;
	mov.b64 	%rd95, {%r156, %r155};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r157}, %rd93;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r158,%dummy}, %rd93;
	}
	shf.l.wrap.b32 	%r159, %r158, %r157, 21;
	shf.l.wrap.b32 	%r160, %r157, %r158, 21;
	mov.b64 	%rd96, {%r160, %r159};
	shr.u64 	%rd97, %rd94, 32;
	xor.b64  	%rd98, %rd96, %rd95;
	cvt.u32.u64	%r161, %rd98;
	cvt.u32.u64	%r162, %rd94;
	xor.b32  	%r163, %r161, %r162;
	cvt.u32.u64	%r164, %rd97;
	xor.b32  	%r165, %r163, %r164;
	and.b32  	%r31, %r165, 268435455;
	add.s32 	%r166, %r76, 1;
	cvt.u64.u32	%rd99, %r166;
	xor.b64  	%rd100, %rd4, %rd99;
	add.s64 	%rd101, %rd3, %rd100;
	shl.b64 	%rd102, %rd100, 16;
	or.b64  	%rd103, %rd102, %rd5;
	xor.b64  	%rd104, %rd103, %rd101;
	add.s64 	%rd105, %rd6, %rd101;
	add.s64 	%rd106, %rd7, %rd104;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r167}, %rd104;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r168,%dummy}, %rd104;
	}
	shf.l.wrap.b32 	%r169, %r168, %r167, 21;
	shf.l.wrap.b32 	%r170, %r167, %r168, 21;
	mov.b64 	%rd107, {%r170, %r169};
	xor.b64  	%rd108, %rd105, %rd8;
	xor.b64  	%rd109, %rd106, %rd107;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd105, 32;
	shr.b64 	%rhs, %rd105, 32;
	add.u64 	%rd110, %lhs, %rhs;
	}
	add.s64 	%rd111, %rd106, %rd108;
	add.s64 	%rd112, %rd110, %rd109;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r171}, %rd108;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r172,%dummy}, %rd108;
	}
	shf.l.wrap.b32 	%r173, %r172, %r171, 13;
	shf.l.wrap.b32 	%r174, %r171, %r172, 13;
	mov.b64 	%rd113, {%r174, %r173};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r175}, %rd109;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r176,%dummy}, %rd109;
	}
	shf.l.wrap.b32 	%r177, %r176, %r175, 16;
	shf.l.wrap.b32 	%r178, %r175, %r176, 16;
	mov.b64 	%rd114, {%r178, %r177};
	xor.b64  	%rd115, %rd111, %rd113;
	xor.b64  	%rd116, %rd112, %rd114;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd111, 32;
	shr.b64 	%rhs, %rd111, 32;
	add.u64 	%rd117, %lhs, %rhs;
	}
	add.s64 	%rd118, %rd112, %rd115;
	add.s64 	%rd119, %rd117, %rd116;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r179}, %rd115;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r180,%dummy}, %rd115;
	}
	shf.l.wrap.b32 	%r181, %r180, %r179, 17;
	shf.l.wrap.b32 	%r182, %r179, %r180, 17;
	mov.b64 	%rd120, {%r182, %r181};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r183}, %rd116;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r184,%dummy}, %rd116;
	}
	shf.l.wrap.b32 	%r185, %r184, %r183, 21;
	shf.l.wrap.b32 	%r186, %r183, %r184, 21;
	mov.b64 	%rd121, {%r186, %r185};
	xor.b64  	%rd122, %rd118, %rd120;
	xor.b64  	%rd123, %rd119, %rd121;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd118, 32;
	shr.b64 	%rhs, %rd118, 32;
	add.u64 	%rd124, %lhs, %rhs;
	}
	xor.b64  	%rd125, %rd119, %rd99;
	xor.b64  	%rd126, %rd124, 255;
	add.s64 	%rd127, %rd125, %rd122;
	add.s64 	%rd128, %rd126, %rd123;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r187}, %rd122;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r188,%dummy}, %rd122;
	}
	shf.l.wrap.b32 	%r189, %r188, %r187, 13;
	shf.l.wrap.b32 	%r190, %r187, %r188, 13;
	mov.b64 	%rd129, {%r190, %r189};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r191}, %rd123;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r192,%dummy}, %rd123;
	}
	shf.l.wrap.b32 	%r193, %r192, %r191, 16;
	shf.l.wrap.b32 	%r194, %r191, %r192, 16;
	mov.b64 	%rd130, {%r194, %r193};
	xor.b64  	%rd131, %rd127, %rd129;
	xor.b64  	%rd132, %rd128, %rd130;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd127, 32;
	shr.b64 	%rhs, %rd127, 32;
	add.u64 	%rd133, %lhs, %rhs;
	}
	add.s64 	%rd134, %rd128, %rd131;
	add.s64 	%rd135, %rd133, %rd132;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r195}, %rd131;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r196,%dummy}, %rd131;
	}
	shf.l.wrap.b32 	%r197, %r196, %r195, 17;
	shf.l.wrap.b32 	%r198, %r195, %r196, 17;
	mov.b64 	%rd136, {%r198, %r197};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r199}, %rd132;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r200,%dummy}, %rd132;
	}
	shf.l.wrap.b32 	%r201, %r200, %r199, 21;
	shf.l.wrap.b32 	%r202, %r199, %r200, 21;
	mov.b64 	%rd137, {%r202, %r201};
	xor.b64  	%rd138, %rd134, %rd136;
	xor.b64  	%rd139, %rd135, %rd137;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd134, 32;
	shr.b64 	%rhs, %rd134, 32;
	add.u64 	%rd140, %lhs, %rhs;
	}
	add.s64 	%rd141, %rd135, %rd138;
	add.s64 	%rd142, %rd140, %rd139;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r203}, %rd138;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r204,%dummy}, %rd138;
	}
	shf.l.wrap.b32 	%r205, %r204, %r203, 13;
	shf.l.wrap.b32 	%r206, %r203, %r204, 13;
	mov.b64 	%rd143, {%r206, %r205};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r207}, %rd139;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r208,%dummy}, %rd139;
	}
	shf.l.wrap.b32 	%r209, %r208, %r207, 16;
	shf.l.wrap.b32 	%r210, %r207, %r208, 16;
	mov.b64 	%rd144, {%r210, %r209};
	xor.b64  	%rd145, %rd141, %rd143;
	xor.b64  	%rd146, %rd142, %rd144;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd141, 32;
	shr.b64 	%rhs, %rd141, 32;
	add.u64 	%rd147, %lhs, %rhs;
	}
	add.s64 	%rd148, %rd142, %rd145;
	add.s64 	%rd149, %rd147, %rd146;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r211}, %rd145;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r212,%dummy}, %rd145;
	}
	shf.l.wrap.b32 	%r213, %r212, %r211, 17;
	shf.l.wrap.b32 	%r214, %r211, %r212, 17;
	mov.b64 	%rd150, {%r214, %r213};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r215}, %rd146;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r216,%dummy}, %rd146;
	}
	shf.l.wrap.b32 	%r217, %r216, %r215, 21;
	shf.l.wrap.b32 	%r218, %r215, %r216, 21;
	mov.b64 	%rd151, {%r218, %r217};
	xor.b64  	%rd152, %rd148, %rd150;
	xor.b64  	%rd153, %rd149, %rd151;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd148, 32;
	shr.b64 	%rhs, %rd148, 32;
	add.u64 	%rd154, %lhs, %rhs;
	}
	add.s64 	%rd155, %rd149, %rd152;
	add.s64 	%rd156, %rd154, %rd153;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r219}, %rd152;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r220,%dummy}, %rd152;
	}
	shf.l.wrap.b32 	%r221, %r220, %r219, 13;
	shf.l.wrap.b32 	%r222, %r219, %r220, 13;
	mov.b64 	%rd157, {%r222, %r221};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r223}, %rd153;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r224,%dummy}, %rd153;
	}
	shf.l.wrap.b32 	%r225, %r224, %r223, 16;
	shf.l.wrap.b32 	%r226, %r223, %r224, 16;
	mov.b64 	%rd158, {%r226, %r225};
	xor.b64  	%rd159, %rd155, %rd157;
	xor.b64  	%rd160, %rd156, %rd158;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd155, 32;
	shr.b64 	%rhs, %rd155, 32;
	add.u64 	%rd161, %lhs, %rhs;
	}
	add.s64 	%rd162, %rd156, %rd159;
	add.s64 	%rd163, %rd161, %rd160;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r227}, %rd159;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r228,%dummy}, %rd159;
	}
	shf.l.wrap.b32 	%r229, %r228, %r227, 17;
	shf.l.wrap.b32 	%r230, %r227, %r228, 17;
	mov.b64 	%rd164, {%r230, %r229};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r231}, %rd160;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r232,%dummy}, %rd160;
	}
	shf.l.wrap.b32 	%r233, %r232, %r231, 21;
	shf.l.wrap.b32 	%r234, %r231, %r232, 21;
	mov.b64 	%rd165, {%r234, %r233};
	xor.b64  	%rd166, %rd162, %rd164;
	xor.b64  	%rd167, %rd163, %rd165;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd162, 32;
	shr.b64 	%rhs, %rd162, 32;
	add.u64 	%rd168, %lhs, %rhs;
	}
	add.s64 	%rd169, %rd163, %rd166;
	add.s64 	%rd170, %rd168, %rd167;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r235}, %rd166;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r236,%dummy}, %rd166;
	}
	shf.l.wrap.b32 	%r237, %r236, %r235, 13;
	shf.l.wrap.b32 	%r238, %r235, %r236, 13;
	mov.b64 	%rd171, {%r238, %r237};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r239}, %rd167;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r240,%dummy}, %rd167;
	}
	shf.l.wrap.b32 	%r241, %r240, %r239, 16;
	shf.l.wrap.b32 	%r242, %r239, %r240, 16;
	mov.b64 	%rd172, {%r242, %r241};
	xor.b64  	%rd173, %rd169, %rd171;
	xor.b64  	%rd174, %rd170, %rd172;
	add.s64 	%rd175, %rd170, %rd173;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r243}, %rd173;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r244,%dummy}, %rd173;
	}
	shf.l.wrap.b32 	%r245, %r244, %r243, 17;
	shf.l.wrap.b32 	%r246, %r243, %r244, 17;
	mov.b64 	%rd176, {%r246, %r245};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r247}, %rd174;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r248,%dummy}, %rd174;
	}
	shf.l.wrap.b32 	%r249, %r248, %r247, 21;
	shf.l.wrap.b32 	%r250, %r247, %r248, 21;
	mov.b64 	%rd177, {%r250, %r249};
	shr.u64 	%rd178, %rd175, 32;
	xor.b64  	%rd179, %rd177, %rd176;
	cvt.u32.u64	%r251, %rd179;
	cvt.u32.u64	%r252, %rd175;
	xor.b32  	%r253, %r251, %r252;
	cvt.u32.u64	%r254, %rd178;
	xor.b32  	%r255, %r253, %r254;
	and.b32  	%r32, %r255, 268435455;
	setp.eq.s32	%p4, %r52, %r31;
	setp.eq.s32	%p5, %r53, %r32;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB0_6;
	bra.uni 	BB0_5;

BB0_5:
	st.shared.u32 	[Recovery$nonces], %r30;

BB0_6:
	setp.eq.s32	%p7, %r54, %r31;
	setp.eq.s32	%p8, %r55, %r32;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB0_8;
	bra.uni 	BB0_7;

BB0_7:
	st.shared.u32 	[Recovery$nonces+4], %r30;

BB0_8:
	setp.eq.s32	%p10, %r56, %r31;
	setp.eq.s32	%p11, %r57, %r32;
	and.pred  	%p12, %p10, %p11;
	@!%p12 bra 	BB0_10;
	bra.uni 	BB0_9;

BB0_9:
	st.shared.u32 	[Recovery$nonces+8], %r30;

BB0_10:
	setp.eq.s32	%p13, %r58, %r31;
	setp.eq.s32	%p14, %r59, %r32;
	and.pred  	%p15, %p13, %p14;
	@!%p15 bra 	BB0_12;
	bra.uni 	BB0_11;

BB0_11:
	st.shared.u32 	[Recovery$nonces+12], %r30;

BB0_12:
	setp.eq.s32	%p16, %r60, %r31;
	setp.eq.s32	%p17, %r61, %r32;
	and.pred  	%p18, %p16, %p17;
	@!%p18 bra 	BB0_14;
	bra.uni 	BB0_13;

BB0_13:
	st.shared.u32 	[Recovery$nonces+16], %r30;

BB0_14:
	setp.eq.s32	%p19, %r62, %r31;
	setp.eq.s32	%p20, %r63, %r32;
	and.pred  	%p21, %p19, %p20;
	@!%p21 bra 	BB0_16;
	bra.uni 	BB0_15;

BB0_15:
	st.shared.u32 	[Recovery$nonces+20], %r30;

BB0_16:
	setp.eq.s32	%p22, %r64, %r31;
	setp.eq.s32	%p23, %r65, %r32;
	and.pred  	%p24, %p22, %p23;
	@!%p24 bra 	BB0_18;
	bra.uni 	BB0_17;

BB0_17:
	st.shared.u32 	[Recovery$nonces+24], %r30;

BB0_18:
	setp.eq.s32	%p25, %r66, %r31;
	setp.eq.s32	%p26, %r67, %r32;
	and.pred  	%p27, %p25, %p26;
	@!%p27 bra 	BB0_20;
	bra.uni 	BB0_19;

BB0_19:
	st.shared.u32 	[Recovery$nonces+28], %r30;

BB0_20:
	setp.eq.s32	%p28, %r68, %r31;
	setp.eq.s32	%p29, %r69, %r32;
	and.pred  	%p30, %p28, %p29;
	@!%p30 bra 	BB0_22;
	bra.uni 	BB0_21;

BB0_21:
	st.shared.u32 	[Recovery$nonces+32], %r30;

BB0_22:
	setp.eq.s32	%p31, %r70, %r31;
	setp.eq.s32	%p32, %r71, %r32;
	and.pred  	%p33, %p31, %p32;
	@!%p33 bra 	BB0_24;
	bra.uni 	BB0_23;

BB0_23:
	st.shared.u32 	[Recovery$nonces+36], %r30;

BB0_24:
	setp.eq.s32	%p34, %r72, %r31;
	setp.eq.s32	%p35, %r73, %r32;
	and.pred  	%p36, %p34, %p35;
	@!%p36 bra 	BB0_26;
	bra.uni 	BB0_25;

BB0_25:
	st.shared.u32 	[Recovery$nonces+40], %r30;

BB0_26:
	setp.eq.s32	%p37, %r74, %r31;
	setp.eq.s32	%p38, %r75, %r32;
	and.pred  	%p39, %p37, %p38;
	@!%p39 bra 	BB0_28;
	bra.uni 	BB0_27;

BB0_27:
	st.shared.u32 	[Recovery$nonces+44], %r30;

BB0_28:
	add.s32 	%r259, %r259, 1;
	setp.lt.s32	%p40, %r259, %r3;
	@%p40 bra 	BB0_4;

BB0_29:
	mov.u32 	%r256, %tid.x;
	setp.lt.s32	%p1, %r256, 12;
	bar.sync 	0;
	@!%p1 bra 	BB0_32;
	bra.uni 	BB0_30;

BB0_30:
	mov.u32 	%r257, %tid.x;
	mul.wide.s32 	%rd184, %r257, 4;
	mov.u64 	%rd183, Recovery$nonces;
	add.s64 	%rd182, %rd183, %rd184;
	ld.shared.u32 	%r34, [%rd182];
	setp.eq.s32	%p41, %r34, 0;
	@%p41 bra 	BB0_32;

	ld.param.u64 	%rd186, [Recovery_param_1];
	mov.u32 	%r258, %tid.x;
	cvt.s64.s32	%rd185, %r258;
	shl.b64 	%rd180, %rd185, 2;
	add.s64 	%rd181, %rd186, %rd180;
	st.global.u32 	[%rd181], %r34;

BB0_32:
	ret;
}

	// .globl	SeedA
.entry SeedA(
	.param .u64 .ptr .const .align 8 SeedA_param_0,
	.param .u64 .ptr .global .align 32 SeedA_param_1,
	.param .u64 .ptr .global .align 4 SeedA_param_2,
	.param .u32 SeedA_param_3
)
{
	.reg .pred 	%p<21>;
	.reg .b32 	%r<332>;
	.reg .b64 	%rd<293>;
	// demoted variable
	.shared .align 8 .b8 SeedA$tmp[16384];
	// demoted variable
	.shared .align 4 .b8 SeedA$counters[256];

	ld.param.u64 	%rd28, [SeedA_param_0];
	ld.param.u64 	%rd29, [SeedA_param_1];
	ld.param.u64 	%rd30, [SeedA_param_2];
	ld.param.u32 	%r37, [SeedA_param_3];
	mov.b32	%r1, %envreg0;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mov.b32	%r4, %envreg6;
	setp.gt.s32	%p1, %r3, 63;
	@%p1 bra 	BB1_3;

	mov.u32 	%r322, %r3;

BB1_2:
	mul.wide.s32 	%rd31, %r322, 4;
	mov.u64 	%rd32, SeedA$counters;
	add.s64 	%rd33, %rd32, %rd31;
	mov.u32 	%r38, 0;
	st.shared.u32 	[%rd33], %r38;
	add.s32 	%r322, %r322, %r2;
	setp.lt.s32	%p2, %r322, 64;
	@%p2 bra 	BB1_2;

BB1_3:
	mov.u32 	%r39, %ctaid.x;
	add.s32 	%r7, %r39, %r1;
	bar.sync 	0;
	shr.s32 	%r40, %r7, 31;
	shr.u32 	%r41, %r40, 26;
	add.s32 	%r42, %r7, %r41;
	and.b32  	%r43, %r42, -64;
	sub.s32 	%r8, %r7, %r43;
	mul.lo.s32 	%r44, %r2, %r4;
	mov.u32 	%r45, 268435456;
	div.u32 	%r9, %r45, %r44;
	setp.eq.s32	%p3, %r9, 0;
	@%p3 bra 	BB1_21;

	mad.lo.s32 	%r47, %r7, %r2, %r3;
	mul.lo.s32 	%r10, %r9, %r47;
	ld.const.u64 	%rd34, [%rd28+8];
	ld.const.u64 	%rd35, [%rd28];
	add.s64 	%rd36, %rd35, %rd34;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r48}, %rd34;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r49,%dummy}, %rd34;
	}
	shf.l.wrap.b32 	%r50, %r49, %r48, 13;
	shf.l.wrap.b32 	%r51, %r48, %r49, 13;
	mov.b64 	%rd37, {%r51, %r50};
	xor.b64  	%rd2, %rd37, %rd36;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd36, 32;
	shr.b64 	%rhs, %rd36, 32;
	add.u64 	%rd3, %lhs, %rhs;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r52}, %rd2;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r53,%dummy}, %rd2;
	}
	shf.l.wrap.b32 	%r54, %r53, %r52, 17;
	shf.l.wrap.b32 	%r55, %r52, %r53, 17;
	mov.b64 	%rd4, {%r55, %r54};
	cvt.s64.s32	%rd5, %r8;
	cvt.s64.s32	%rd6, %r37;
	ld.const.u64 	%rd7, [%rd28+24];
	shr.u64 	%rd8, %rd7, 48;
	mov.u32 	%r323, 0;

BB1_5:
	ld.param.u64 	%rd282, [SeedA_param_0];
	add.s32 	%r56, %r323, %r10;
	shl.b32 	%r57, %r56, 1;
	cvt.u64.u32	%rd38, %r57;
	xor.b64  	%rd39, %rd7, %rd38;
	ld.const.u64 	%rd40, [%rd282+16];
	add.s64 	%rd41, %rd40, %rd39;
	shl.b64 	%rd42, %rd39, 16;
	or.b64  	%rd43, %rd42, %rd8;
	xor.b64  	%rd44, %rd43, %rd41;
	add.s64 	%rd45, %rd2, %rd41;
	add.s64 	%rd46, %rd3, %rd44;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r58}, %rd44;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r59,%dummy}, %rd44;
	}
	shf.l.wrap.b32 	%r60, %r59, %r58, 21;
	shf.l.wrap.b32 	%r61, %r58, %r59, 21;
	mov.b64 	%rd47, {%r61, %r60};
	xor.b64  	%rd48, %rd45, %rd4;
	xor.b64  	%rd49, %rd46, %rd47;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd45, 32;
	shr.b64 	%rhs, %rd45, 32;
	add.u64 	%rd50, %lhs, %rhs;
	}
	add.s64 	%rd51, %rd46, %rd48;
	add.s64 	%rd52, %rd50, %rd49;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r62}, %rd48;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r63,%dummy}, %rd48;
	}
	shf.l.wrap.b32 	%r64, %r63, %r62, 13;
	shf.l.wrap.b32 	%r65, %r62, %r63, 13;
	mov.b64 	%rd53, {%r65, %r64};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r66}, %rd49;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r67,%dummy}, %rd49;
	}
	shf.l.wrap.b32 	%r68, %r67, %r66, 16;
	shf.l.wrap.b32 	%r69, %r66, %r67, 16;
	mov.b64 	%rd54, {%r69, %r68};
	xor.b64  	%rd55, %rd51, %rd53;
	xor.b64  	%rd56, %rd52, %rd54;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd51, 32;
	shr.b64 	%rhs, %rd51, 32;
	add.u64 	%rd57, %lhs, %rhs;
	}
	add.s64 	%rd58, %rd52, %rd55;
	add.s64 	%rd59, %rd57, %rd56;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r70}, %rd55;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r71,%dummy}, %rd55;
	}
	shf.l.wrap.b32 	%r72, %r71, %r70, 17;
	shf.l.wrap.b32 	%r73, %r70, %r71, 17;
	mov.b64 	%rd60, {%r73, %r72};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r74}, %rd56;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r75,%dummy}, %rd56;
	}
	shf.l.wrap.b32 	%r76, %r75, %r74, 21;
	shf.l.wrap.b32 	%r77, %r74, %r75, 21;
	mov.b64 	%rd61, {%r77, %r76};
	xor.b64  	%rd62, %rd58, %rd60;
	xor.b64  	%rd63, %rd59, %rd61;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd58, 32;
	shr.b64 	%rhs, %rd58, 32;
	add.u64 	%rd64, %lhs, %rhs;
	}
	xor.b64  	%rd65, %rd59, %rd38;
	xor.b64  	%rd66, %rd64, 255;
	add.s64 	%rd67, %rd65, %rd62;
	add.s64 	%rd68, %rd66, %rd63;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r78}, %rd62;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r79,%dummy}, %rd62;
	}
	shf.l.wrap.b32 	%r80, %r79, %r78, 13;
	shf.l.wrap.b32 	%r81, %r78, %r79, 13;
	mov.b64 	%rd69, {%r81, %r80};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r82}, %rd63;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r83,%dummy}, %rd63;
	}
	shf.l.wrap.b32 	%r84, %r83, %r82, 16;
	shf.l.wrap.b32 	%r85, %r82, %r83, 16;
	mov.b64 	%rd70, {%r85, %r84};
	xor.b64  	%rd71, %rd67, %rd69;
	xor.b64  	%rd72, %rd68, %rd70;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd67, 32;
	shr.b64 	%rhs, %rd67, 32;
	add.u64 	%rd73, %lhs, %rhs;
	}
	add.s64 	%rd74, %rd68, %rd71;
	add.s64 	%rd75, %rd73, %rd72;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r86}, %rd71;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r87,%dummy}, %rd71;
	}
	shf.l.wrap.b32 	%r88, %r87, %r86, 17;
	shf.l.wrap.b32 	%r89, %r86, %r87, 17;
	mov.b64 	%rd76, {%r89, %r88};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r90}, %rd72;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r91,%dummy}, %rd72;
	}
	shf.l.wrap.b32 	%r92, %r91, %r90, 21;
	shf.l.wrap.b32 	%r93, %r90, %r91, 21;
	mov.b64 	%rd77, {%r93, %r92};
	xor.b64  	%rd78, %rd74, %rd76;
	xor.b64  	%rd79, %rd75, %rd77;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd74, 32;
	shr.b64 	%rhs, %rd74, 32;
	add.u64 	%rd80, %lhs, %rhs;
	}
	add.s64 	%rd81, %rd75, %rd78;
	add.s64 	%rd82, %rd80, %rd79;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r94}, %rd78;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r95,%dummy}, %rd78;
	}
	shf.l.wrap.b32 	%r96, %r95, %r94, 13;
	shf.l.wrap.b32 	%r97, %r94, %r95, 13;
	mov.b64 	%rd83, {%r97, %r96};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r98}, %rd79;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r99,%dummy}, %rd79;
	}
	shf.l.wrap.b32 	%r100, %r99, %r98, 16;
	shf.l.wrap.b32 	%r101, %r98, %r99, 16;
	mov.b64 	%rd84, {%r101, %r100};
	xor.b64  	%rd85, %rd81, %rd83;
	xor.b64  	%rd86, %rd82, %rd84;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd81, 32;
	shr.b64 	%rhs, %rd81, 32;
	add.u64 	%rd87, %lhs, %rhs;
	}
	add.s64 	%rd88, %rd82, %rd85;
	add.s64 	%rd89, %rd87, %rd86;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r102}, %rd85;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r103,%dummy}, %rd85;
	}
	shf.l.wrap.b32 	%r104, %r103, %r102, 17;
	shf.l.wrap.b32 	%r105, %r102, %r103, 17;
	mov.b64 	%rd90, {%r105, %r104};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r106}, %rd86;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r107,%dummy}, %rd86;
	}
	shf.l.wrap.b32 	%r108, %r107, %r106, 21;
	shf.l.wrap.b32 	%r109, %r106, %r107, 21;
	mov.b64 	%rd91, {%r109, %r108};
	xor.b64  	%rd92, %rd88, %rd90;
	xor.b64  	%rd93, %rd89, %rd91;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd88, 32;
	shr.b64 	%rhs, %rd88, 32;
	add.u64 	%rd94, %lhs, %rhs;
	}
	add.s64 	%rd95, %rd89, %rd92;
	add.s64 	%rd96, %rd94, %rd93;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r110}, %rd92;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r111,%dummy}, %rd92;
	}
	shf.l.wrap.b32 	%r112, %r111, %r110, 13;
	shf.l.wrap.b32 	%r113, %r110, %r111, 13;
	mov.b64 	%rd97, {%r113, %r112};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r114}, %rd93;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r115,%dummy}, %rd93;
	}
	shf.l.wrap.b32 	%r116, %r115, %r114, 16;
	shf.l.wrap.b32 	%r117, %r114, %r115, 16;
	mov.b64 	%rd98, {%r117, %r116};
	xor.b64  	%rd99, %rd95, %rd97;
	xor.b64  	%rd100, %rd96, %rd98;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd95, 32;
	shr.b64 	%rhs, %rd95, 32;
	add.u64 	%rd101, %lhs, %rhs;
	}
	add.s64 	%rd102, %rd96, %rd99;
	add.s64 	%rd103, %rd101, %rd100;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r118}, %rd99;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r119,%dummy}, %rd99;
	}
	shf.l.wrap.b32 	%r120, %r119, %r118, 17;
	shf.l.wrap.b32 	%r121, %r118, %r119, 17;
	mov.b64 	%rd104, {%r121, %r120};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r122}, %rd100;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r123,%dummy}, %rd100;
	}
	shf.l.wrap.b32 	%r124, %r123, %r122, 21;
	shf.l.wrap.b32 	%r125, %r122, %r123, 21;
	mov.b64 	%rd105, {%r125, %r124};
	xor.b64  	%rd106, %rd102, %rd104;
	xor.b64  	%rd107, %rd103, %rd105;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd102, 32;
	shr.b64 	%rhs, %rd102, 32;
	add.u64 	%rd108, %lhs, %rhs;
	}
	add.s64 	%rd109, %rd103, %rd106;
	add.s64 	%rd110, %rd108, %rd107;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r126}, %rd106;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r127,%dummy}, %rd106;
	}
	shf.l.wrap.b32 	%r128, %r127, %r126, 13;
	shf.l.wrap.b32 	%r129, %r126, %r127, 13;
	mov.b64 	%rd111, {%r129, %r128};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r130}, %rd107;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r131,%dummy}, %rd107;
	}
	shf.l.wrap.b32 	%r132, %r131, %r130, 16;
	shf.l.wrap.b32 	%r133, %r130, %r131, 16;
	mov.b64 	%rd112, {%r133, %r132};
	xor.b64  	%rd113, %rd109, %rd111;
	xor.b64  	%rd114, %rd110, %rd112;
	add.s64 	%rd115, %rd110, %rd113;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r134}, %rd113;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r135,%dummy}, %rd113;
	}
	shf.l.wrap.b32 	%r136, %r135, %r134, 17;
	shf.l.wrap.b32 	%r137, %r134, %r135, 17;
	mov.b64 	%rd116, {%r137, %r136};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r138}, %rd114;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r139,%dummy}, %rd114;
	}
	shf.l.wrap.b32 	%r140, %r139, %r138, 21;
	shf.l.wrap.b32 	%r141, %r138, %r139, 21;
	mov.b64 	%rd117, {%r141, %r140};
	shr.u64 	%rd118, %rd115, 32;
	xor.b64  	%rd119, %rd117, %rd116;
	xor.b64  	%rd120, %rd119, %rd115;
	xor.b64  	%rd121, %rd120, %rd118;
	cvt.u32.u64	%r142, %rd117;
	cvt.u32.u64	%r143, %rd116;
	xor.b32  	%r144, %r142, %r143;
	cvt.u32.u64	%r145, %rd115;
	xor.b32  	%r146, %r144, %r145;
	cvt.u32.u64	%r147, %rd118;
	xor.b32  	%r148, %r146, %r147;
	add.s32 	%r149, %r57, 1;
	cvt.u64.u32	%rd122, %r149;
	xor.b64  	%rd123, %rd7, %rd122;
	add.s64 	%rd124, %rd40, %rd123;
	shl.b64 	%rd125, %rd123, 16;
	or.b64  	%rd126, %rd125, %rd8;
	xor.b64  	%rd127, %rd126, %rd124;
	add.s64 	%rd128, %rd2, %rd124;
	add.s64 	%rd129, %rd3, %rd127;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r150}, %rd127;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r151,%dummy}, %rd127;
	}
	shf.l.wrap.b32 	%r152, %r151, %r150, 21;
	shf.l.wrap.b32 	%r153, %r150, %r151, 21;
	mov.b64 	%rd130, {%r153, %r152};
	xor.b64  	%rd131, %rd128, %rd4;
	xor.b64  	%rd132, %rd129, %rd130;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd128, 32;
	shr.b64 	%rhs, %rd128, 32;
	add.u64 	%rd133, %lhs, %rhs;
	}
	add.s64 	%rd134, %rd129, %rd131;
	add.s64 	%rd135, %rd133, %rd132;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r154}, %rd131;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r155,%dummy}, %rd131;
	}
	shf.l.wrap.b32 	%r156, %r155, %r154, 13;
	shf.l.wrap.b32 	%r157, %r154, %r155, 13;
	mov.b64 	%rd136, {%r157, %r156};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r158}, %rd132;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r159,%dummy}, %rd132;
	}
	shf.l.wrap.b32 	%r160, %r159, %r158, 16;
	shf.l.wrap.b32 	%r161, %r158, %r159, 16;
	mov.b64 	%rd137, {%r161, %r160};
	xor.b64  	%rd138, %rd134, %rd136;
	xor.b64  	%rd139, %rd135, %rd137;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd134, 32;
	shr.b64 	%rhs, %rd134, 32;
	add.u64 	%rd140, %lhs, %rhs;
	}
	add.s64 	%rd141, %rd135, %rd138;
	add.s64 	%rd142, %rd140, %rd139;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r162}, %rd138;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r163,%dummy}, %rd138;
	}
	shf.l.wrap.b32 	%r164, %r163, %r162, 17;
	shf.l.wrap.b32 	%r165, %r162, %r163, 17;
	mov.b64 	%rd143, {%r165, %r164};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r166}, %rd139;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r167,%dummy}, %rd139;
	}
	shf.l.wrap.b32 	%r168, %r167, %r166, 21;
	shf.l.wrap.b32 	%r169, %r166, %r167, 21;
	mov.b64 	%rd144, {%r169, %r168};
	xor.b64  	%rd145, %rd141, %rd143;
	xor.b64  	%rd146, %rd142, %rd144;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd141, 32;
	shr.b64 	%rhs, %rd141, 32;
	add.u64 	%rd147, %lhs, %rhs;
	}
	xor.b64  	%rd148, %rd142, %rd122;
	xor.b64  	%rd149, %rd147, 255;
	add.s64 	%rd150, %rd148, %rd145;
	add.s64 	%rd151, %rd149, %rd146;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r170}, %rd145;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r171,%dummy}, %rd145;
	}
	shf.l.wrap.b32 	%r172, %r171, %r170, 13;
	shf.l.wrap.b32 	%r173, %r170, %r171, 13;
	mov.b64 	%rd152, {%r173, %r172};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r174}, %rd146;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r175,%dummy}, %rd146;
	}
	shf.l.wrap.b32 	%r176, %r175, %r174, 16;
	shf.l.wrap.b32 	%r177, %r174, %r175, 16;
	mov.b64 	%rd153, {%r177, %r176};
	xor.b64  	%rd154, %rd150, %rd152;
	xor.b64  	%rd155, %rd151, %rd153;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd150, 32;
	shr.b64 	%rhs, %rd150, 32;
	add.u64 	%rd156, %lhs, %rhs;
	}
	add.s64 	%rd157, %rd151, %rd154;
	add.s64 	%rd158, %rd156, %rd155;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r178}, %rd154;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r179,%dummy}, %rd154;
	}
	shf.l.wrap.b32 	%r180, %r179, %r178, 17;
	shf.l.wrap.b32 	%r181, %r178, %r179, 17;
	mov.b64 	%rd159, {%r181, %r180};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r182}, %rd155;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r183,%dummy}, %rd155;
	}
	shf.l.wrap.b32 	%r184, %r183, %r182, 21;
	shf.l.wrap.b32 	%r185, %r182, %r183, 21;
	mov.b64 	%rd160, {%r185, %r184};
	xor.b64  	%rd161, %rd157, %rd159;
	xor.b64  	%rd162, %rd158, %rd160;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd157, 32;
	shr.b64 	%rhs, %rd157, 32;
	add.u64 	%rd163, %lhs, %rhs;
	}
	add.s64 	%rd164, %rd158, %rd161;
	add.s64 	%rd165, %rd163, %rd162;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r186}, %rd161;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r187,%dummy}, %rd161;
	}
	shf.l.wrap.b32 	%r188, %r187, %r186, 13;
	shf.l.wrap.b32 	%r189, %r186, %r187, 13;
	mov.b64 	%rd166, {%r189, %r188};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r190}, %rd162;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r191,%dummy}, %rd162;
	}
	shf.l.wrap.b32 	%r192, %r191, %r190, 16;
	shf.l.wrap.b32 	%r193, %r190, %r191, 16;
	mov.b64 	%rd167, {%r193, %r192};
	xor.b64  	%rd168, %rd164, %rd166;
	xor.b64  	%rd169, %rd165, %rd167;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd164, 32;
	shr.b64 	%rhs, %rd164, 32;
	add.u64 	%rd170, %lhs, %rhs;
	}
	add.s64 	%rd171, %rd165, %rd168;
	add.s64 	%rd172, %rd170, %rd169;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r194}, %rd168;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r195,%dummy}, %rd168;
	}
	shf.l.wrap.b32 	%r196, %r195, %r194, 17;
	shf.l.wrap.b32 	%r197, %r194, %r195, 17;
	mov.b64 	%rd173, {%r197, %r196};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r198}, %rd169;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r199,%dummy}, %rd169;
	}
	shf.l.wrap.b32 	%r200, %r199, %r198, 21;
	shf.l.wrap.b32 	%r201, %r198, %r199, 21;
	mov.b64 	%rd174, {%r201, %r200};
	xor.b64  	%rd175, %rd171, %rd173;
	xor.b64  	%rd176, %rd172, %rd174;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd171, 32;
	shr.b64 	%rhs, %rd171, 32;
	add.u64 	%rd177, %lhs, %rhs;
	}
	add.s64 	%rd178, %rd172, %rd175;
	add.s64 	%rd179, %rd177, %rd176;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r202}, %rd175;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r203,%dummy}, %rd175;
	}
	shf.l.wrap.b32 	%r204, %r203, %r202, 13;
	shf.l.wrap.b32 	%r205, %r202, %r203, 13;
	mov.b64 	%rd180, {%r205, %r204};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r206}, %rd176;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r207,%dummy}, %rd176;
	}
	shf.l.wrap.b32 	%r208, %r207, %r206, 16;
	shf.l.wrap.b32 	%r209, %r206, %r207, 16;
	mov.b64 	%rd181, {%r209, %r208};
	xor.b64  	%rd182, %rd178, %rd180;
	xor.b64  	%rd183, %rd179, %rd181;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd178, 32;
	shr.b64 	%rhs, %rd178, 32;
	add.u64 	%rd184, %lhs, %rhs;
	}
	add.s64 	%rd185, %rd179, %rd182;
	add.s64 	%rd186, %rd184, %rd183;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r210}, %rd182;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r211,%dummy}, %rd182;
	}
	shf.l.wrap.b32 	%r212, %r211, %r210, 17;
	shf.l.wrap.b32 	%r213, %r210, %r211, 17;
	mov.b64 	%rd187, {%r213, %r212};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r214}, %rd183;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r215,%dummy}, %rd183;
	}
	shf.l.wrap.b32 	%r216, %r215, %r214, 21;
	shf.l.wrap.b32 	%r217, %r214, %r215, 21;
	mov.b64 	%rd188, {%r217, %r216};
	xor.b64  	%rd189, %rd185, %rd187;
	xor.b64  	%rd190, %rd186, %rd188;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd185, 32;
	shr.b64 	%rhs, %rd185, 32;
	add.u64 	%rd191, %lhs, %rhs;
	}
	add.s64 	%rd192, %rd186, %rd189;
	add.s64 	%rd193, %rd191, %rd190;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r218}, %rd189;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r219,%dummy}, %rd189;
	}
	shf.l.wrap.b32 	%r220, %r219, %r218, 13;
	shf.l.wrap.b32 	%r221, %r218, %r219, 13;
	mov.b64 	%rd194, {%r221, %r220};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r222}, %rd190;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r223,%dummy}, %rd190;
	}
	shf.l.wrap.b32 	%r224, %r223, %r222, 16;
	shf.l.wrap.b32 	%r225, %r222, %r223, 16;
	mov.b64 	%rd195, {%r225, %r224};
	xor.b64  	%rd196, %rd192, %rd194;
	xor.b64  	%rd197, %rd193, %rd195;
	add.s64 	%rd198, %rd193, %rd196;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r226}, %rd196;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r227,%dummy}, %rd196;
	}
	shf.l.wrap.b32 	%r228, %r227, %r226, 17;
	shf.l.wrap.b32 	%r229, %r226, %r227, 17;
	mov.b64 	%rd199, {%r229, %r228};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r230}, %rd197;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r231,%dummy}, %rd197;
	}
	shf.l.wrap.b32 	%r232, %r231, %r230, 21;
	shf.l.wrap.b32 	%r233, %r230, %r231, 21;
	mov.b64 	%rd200, {%r233, %r232};
	shr.u64 	%rd201, %rd198, 32;
	cvt.u32.u64	%r234, %rd200;
	cvt.u32.u64	%r235, %rd199;
	xor.b32  	%r236, %r234, %r235;
	cvt.u32.u64	%r237, %rd198;
	xor.b32  	%r238, %r236, %r237;
	cvt.u32.u64	%r239, %rd201;
	xor.b32  	%r240, %r238, %r239;
	and.b32  	%r241, %r148, 63;
	and.b64  	%rd9, %rd121, 63;
	mul.wide.u32 	%rd202, %r241, 4;
	mov.u64 	%rd203, SeedA$counters;
	add.s64 	%rd204, %rd203, %rd202;
	atom.shared.add.u32 	%r242, [%rd204], 1;
	mov.u32 	%r243, 31;
	min.s32 	%r12, %r242, %r243;
	and.b32  	%r244, %r148, 268435455;
	and.b32  	%r245, %r240, 268435455;
	mul.wide.u32 	%rd205, %r241, 256;
	mov.u64 	%rd206, SeedA$tmp;
	add.s64 	%rd207, %rd206, %rd205;
	mul.wide.s32 	%rd208, %r12, 8;
	add.s64 	%rd209, %rd207, %rd208;
	st.shared.v2.u32 	[%rd209], {%r244, %r245};
	bar.sync 	0;
	setp.ne.s32	%p4, %r12, 15;
	@%p4 bra 	BB1_20;

	mov.u64 	%rd283, SeedA$counters;
	shl.b64 	%rd210, %rd9, 2;
	add.s64 	%rd10, %rd283, %rd210;
	cvt.u32.u64	%r246, %rd9;
	ld.shared.u32 	%r247, [%rd10];
	mov.u32 	%r248, 32;
	min.s32 	%r13, %r248, %r247;
	shr.s32 	%r249, %r13, 31;
	shr.u32 	%r250, %r249, 28;
	add.s32 	%r251, %r13, %r250;
	and.b32  	%r15, %r251, -16;
	sub.s32 	%r14, %r13, %r15;
	shl.b32 	%r16, %r246, 6;
	cvt.u64.u32	%rd212, %r16;
	add.s64 	%rd213, %rd212, %rd5;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd30, %rd214;
	atom.global.add.u32 	%r17, [%rd215], %r15;
	setp.lt.s32	%p5, %r15, 1;
	@%p5 bra 	BB1_9;

	add.s32 	%r253, %r16, %r8;
	cvt.s64.s32	%rd217, %r253;
	mul.lo.s64 	%rd218, %rd217, %rd6;
	sub.s32 	%r254, %r37, %r15;
	min.s32 	%r255, %r17, %r254;
	cvt.s64.s32	%rd219, %r255;
	add.s64 	%rd11, %rd219, %rd218;
	mov.u32 	%r324, 0;
	mov.u64 	%rd289, 0;

BB1_8:
	mov.u64 	%rd288, SeedA$tmp;
	shl.b64 	%rd220, %rd9, 8;
	add.s64 	%rd222, %rd288, %rd220;
	shl.b64 	%rd223, %rd289, 3;
	add.s64 	%rd224, %rd222, %rd223;
	ld.shared.u64 	%rd225, [%rd224+8];
	ld.shared.u64 	%rd226, [%rd224];
	ld.shared.u64 	%rd227, [%rd224+24];
	ld.shared.u64 	%rd228, [%rd224+16];
	add.s64 	%rd229, %rd11, %rd289;
	shl.b64 	%rd230, %rd229, 3;
	and.b64  	%rd231, %rd230, -32;
	add.s64 	%rd232, %rd29, %rd231;
	st.global.v2.u64 	[%rd232+16], {%rd228, %rd227};
	st.global.v2.u64 	[%rd232], {%rd226, %rd225};
	add.s64 	%rd289, %rd289, 4;
	add.s32 	%r324, %r324, 4;
	setp.lt.s32	%p6, %r324, %r15;
	@%p6 bra 	BB1_8;

BB1_9:
	setp.lt.s32	%p7, %r14, 1;
	@%p7 bra 	BB1_19;

	and.b32  	%r20, %r14, 3;
	setp.eq.s32	%p8, %r20, 0;
	mov.u32 	%r328, 0;
	@%p8 bra 	BB1_16;

	setp.eq.s32	%p9, %r20, 1;
	mov.u32 	%r326, 0;
	@%p9 bra 	BB1_15;

	setp.eq.s32	%p10, %r20, 2;
	mov.u32 	%r325, 0;
	@%p10 bra 	BB1_14;

	mov.u64 	%rd284, SeedA$tmp;
	shl.b64 	%rd233, %rd9, 8;
	add.s64 	%rd235, %rd284, %rd233;
	mul.wide.s32 	%rd236, %r15, 8;
	add.s64 	%rd237, %rd235, %rd236;
	ld.shared.v2.u32 	{%r268, %r269}, [%rd237];
	st.shared.v2.u32 	[%rd235], {%r268, %r269};
	mov.u32 	%r325, 1;

BB1_14:
	mov.u64 	%rd285, SeedA$tmp;
	add.s32 	%r272, %r325, %r15;
	shl.b64 	%rd238, %rd9, 8;
	add.s64 	%rd240, %rd285, %rd238;
	mul.wide.s32 	%rd241, %r272, 8;
	add.s64 	%rd242, %rd240, %rd241;
	ld.shared.v2.u32 	{%r273, %r274}, [%rd242];
	mul.wide.u32 	%rd243, %r325, 8;
	add.s64 	%rd244, %rd240, %rd243;
	st.shared.v2.u32 	[%rd244], {%r273, %r274};
	add.s32 	%r326, %r325, 1;

BB1_15:
	mov.u64 	%rd286, SeedA$tmp;
	add.s32 	%r277, %r326, %r15;
	shl.b64 	%rd245, %rd9, 8;
	add.s64 	%rd247, %rd286, %rd245;
	mul.wide.s32 	%rd248, %r277, 8;
	add.s64 	%rd249, %rd247, %rd248;
	ld.shared.v2.u32 	{%r278, %r279}, [%rd249];
	mul.wide.s32 	%rd250, %r326, 8;
	add.s64 	%rd251, %rd247, %rd250;
	st.shared.v2.u32 	[%rd251], {%r278, %r279};
	add.s32 	%r328, %r326, 1;

BB1_16:
	setp.lt.u32	%p11, %r14, 4;
	@%p11 bra 	BB1_19;

	cvt.s64.s32	%rd291, %r328;
	add.s32 	%r282, %r13, %r328;
	sub.s32 	%r283, %r282, %r14;
	cvt.s64.s32	%rd290, %r283;

BB1_18:
	mov.u64 	%rd287, SeedA$tmp;
	shl.b64 	%rd252, %rd9, 8;
	add.s64 	%rd254, %rd287, %rd252;
	shl.b64 	%rd255, %rd290, 3;
	add.s64 	%rd256, %rd254, %rd255;
	ld.shared.v2.u32 	{%r284, %r285}, [%rd256];
	shl.b64 	%rd257, %rd291, 3;
	add.s64 	%rd258, %rd254, %rd257;
	st.shared.v2.u32 	[%rd258], {%r284, %r285};
	ld.shared.v2.u32 	{%r288, %r289}, [%rd256+8];
	st.shared.v2.u32 	[%rd258+8], {%r288, %r289};
	ld.shared.v2.u32 	{%r292, %r293}, [%rd256+16];
	st.shared.v2.u32 	[%rd258+16], {%r292, %r293};
	ld.shared.v2.u32 	{%r296, %r297}, [%rd256+24];
	st.shared.v2.u32 	[%rd258+24], {%r296, %r297};
	add.s64 	%rd291, %rd291, 4;
	add.s64 	%rd290, %rd290, 4;
	add.s32 	%r328, %r328, 4;
	setp.lt.s32	%p12, %r328, %r14;
	@%p12 bra 	BB1_18;

BB1_19:
	st.shared.u32 	[%rd10], %r14;

BB1_20:
	bar.sync 	0;
	add.s32 	%r323, %r323, 1;
	setp.lt.s32	%p13, %r323, %r9;
	@%p13 bra 	BB1_5;

BB1_21:
	mov.u32 	%r321, %tid.x;
	setp.gt.s32	%p20, %r321, 63;
	@%p20 bra 	BB1_29;

	mov.u32 	%r329, %tid.x;
	cvt.s64.s32	%rd20, %r8;
	add.s32 	%r29, %r37, -4;
	cvt.s64.s32	%rd21, %r37;

BB1_23:
	cvt.s64.s32	%rd22, %r329;
	mul.wide.s32 	%rd259, %r329, 4;
	mov.u64 	%rd260, SeedA$counters;
	add.s64 	%rd261, %rd260, %rd259;
	ld.shared.u32 	%r300, [%rd261];
	mov.u32 	%r301, 32;
	min.s32 	%r31, %r301, %r300;
	and.b32  	%r302, %r31, 3;
	setp.eq.s32	%p15, %r302, 0;
	mov.u32 	%r330, %r31;
	@%p15 bra 	BB1_25;

BB1_24:
	shl.b64 	%rd262, %rd22, 8;
	mov.u64 	%rd263, SeedA$tmp;
	add.s64 	%rd264, %rd263, %rd262;
	mul.wide.s32 	%rd265, %r330, 8;
	add.s64 	%rd266, %rd264, %rd265;
	mov.u32 	%r303, 0;
	st.shared.v2.u32 	[%rd266], {%r303, %r303};
	add.s32 	%r330, %r330, 1;
	and.b32  	%r304, %r330, 3;
	setp.ne.s32	%p16, %r304, 0;
	@%p16 bra 	BB1_24;

BB1_25:
	setp.lt.s32	%p17, %r31, 1;
	@%p17 bra 	BB1_28;

	cvt.u32.u64	%r306, %rd22;
	shl.b32 	%r307, %r329, 6;
	cvt.s64.s32	%rd267, %r307;
	add.s64 	%rd268, %rd267, %rd20;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd23, %rd30, %rd269;
	add.s32 	%r308, %r307, %r8;
	cvt.s64.s32	%rd270, %r308;
	mul.lo.s64 	%rd24, %rd270, %rd21;
	mul.wide.s32 	%rd271, %r306, 256;
	mov.u64 	%rd272, SeedA$tmp;
	add.s64 	%rd292, %rd272, %rd271;
	mov.u32 	%r331, 0;

BB1_27:
	atom.global.add.u32 	%r309, [%rd23], 4;
	min.s32 	%r310, %r309, %r29;
	ld.shared.u64 	%rd273, [%rd292+8];
	ld.shared.u64 	%rd274, [%rd292];
	ld.shared.u64 	%rd275, [%rd292+24];
	ld.shared.u64 	%rd276, [%rd292+16];
	cvt.s64.s32	%rd277, %r310;
	add.s64 	%rd278, %rd277, %rd24;
	shl.b64 	%rd279, %rd278, 3;
	and.b64  	%rd280, %rd279, -32;
	add.s64 	%rd281, %rd29, %rd280;
	st.global.v2.u64 	[%rd281+16], {%rd276, %rd275};
	st.global.v2.u64 	[%rd281], {%rd274, %rd273};
	add.s64 	%rd292, %rd292, 32;
	add.s32 	%r331, %r331, 4;
	setp.lt.s32	%p18, %r331, %r31;
	@%p18 bra 	BB1_27;

BB1_28:
	mov.u32 	%r320, %ntid.x;
	add.s32 	%r329, %r329, %r320;
	setp.lt.s32	%p19, %r329, 64;
	@%p19 bra 	BB1_23;

BB1_29:
	ret;
}

	// .globl	SeedB
.entry SeedB(
	.param .u64 .ptr .const .align 8 SeedB_param_0,
	.param .u64 .ptr .global .align 8 SeedB_param_1,
	.param .u64 .ptr .global .align 32 SeedB_param_2,
	.param .u64 .ptr .global .align 4 SeedB_param_3,
	.param .u64 .ptr .global .align 4 SeedB_param_4,
	.param .u32 SeedB_param_5,
	.param .u32 SeedB_param_6,
	.param .u32 SeedB_param_7
)
{
	.reg .pred 	%p<22>;
	.reg .b32 	%r<155>;
	.reg .b64 	%rd<126>;
	// demoted variable
	.shared .align 8 .b8 SeedB$tmp[8192];
	// demoted variable
	.shared .align 4 .b8 SeedB$counters[256];

	ld.param.u64 	%rd26, [SeedB_param_1];
	ld.param.u64 	%rd27, [SeedB_param_2];
	ld.param.u64 	%rd28, [SeedB_param_3];
	ld.param.u64 	%rd29, [SeedB_param_4];
	ld.param.u32 	%r47, [SeedB_param_5];
	ld.param.u32 	%r48, [SeedB_param_6];
	ld.param.u32 	%r49, [SeedB_param_7];
	mov.b32	%r50, %envreg0;
	mov.u32 	%r51, %ctaid.x;
	add.s32 	%r1, %r51, %r50;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r152, %tid.x;
	setp.gt.s32	%p1, %r152, 63;
	@%p1 bra 	BB2_3;

	mov.u32 	%r141, %r152;

BB2_2:
	mul.wide.s32 	%rd30, %r141, 4;
	mov.u64 	%rd31, SeedB$counters;
	add.s64 	%rd32, %rd31, %rd30;
	mov.u32 	%r52, 0;
	st.shared.u32 	[%rd32], %r52;
	add.s32 	%r141, %r141, %r2;
	setp.lt.s32	%p2, %r141, 64;
	@%p2 bra 	BB2_2;

BB2_3:
	bar.sync 	0;
	shr.s32 	%r53, %r1, 31;
	shr.u32 	%r54, %r53, 26;
	add.s32 	%r55, %r1, %r54;
	shr.s32 	%r6, %r55, 6;
	add.s32 	%r56, %r1, %r49;
	mul.wide.u32 	%rd33, %r56, 4;
	add.s64 	%rd34, %rd28, %rd33;
	ld.global.nc.u32 	%r57, [%rd34];
	min.s32 	%r7, %r57, %r47;
	add.s32 	%r58, %r2, %r7;
	add.s32 	%r59, %r58, -1;
	div.s32 	%r8, %r59, %r2;
	shr.u32 	%r9, %r48, 5;
	setp.lt.s32	%p3, %r8, 1;
	@%p3 bra 	BB2_26;

	shr.u32 	%r62, %r48, 3;
	mad.lo.s32 	%r10, %r1, %r47, %r62;
	shl.b32 	%r11, %r6, 6;
	cvt.s64.s32	%rd35, %r11;
	cvt.u64.u32	%rd36, %r49;
	add.s64 	%rd1, %rd35, %rd36;
	cvt.u64.u32	%rd2, %r9;
	cvt.s64.s32	%rd3, %r47;
	mov.u32 	%r61, 0;
	mov.u32 	%r143, %r61;

BB2_5:
	mad.lo.s32 	%r14, %r143, %r2, %r152;
	setp.ge.s32	%p4, %r14, %r7;
	@%p4 bra 	BB2_6;

	add.s32 	%r64, %r10, %r14;
	mul.wide.u32 	%rd37, %r64, 8;
	add.s64 	%rd38, %rd26, %rd37;
	ld.global.nc.v2.u32 	{%r65, %r66}, [%rd38];
	or.b32  	%r67, %r65, %r66;
	setp.eq.s32	%p5, %r67, 0;
	@%p5 bra 	BB2_25;

	bfe.u32 	%r142, %r65, 6, 6;
	mul.wide.u32 	%rd39, %r142, 4;
	mov.u64 	%rd40, SeedB$counters;
	add.s64 	%rd41, %rd40, %rd39;
	atom.shared.add.u32 	%r68, [%rd41], 1;
	mov.u32 	%r69, 15;
	min.s32 	%r145, %r68, %r69;
	mul.wide.u32 	%rd42, %r142, 128;
	mov.u64 	%rd43, SeedB$tmp;
	add.s64 	%rd44, %rd43, %rd42;
	mul.wide.s32 	%rd45, %r145, 8;
	add.s64 	%rd46, %rd44, %rd45;
	st.shared.v2.u32 	[%rd46], {%r65, %r66};
	bra.uni 	BB2_9;

BB2_6:
	mov.u32 	%r145, %r61;

BB2_9:
	bar.sync 	0;
	setp.ne.s32	%p6, %r145, 7;
	@%p6 bra 	BB2_24;

	cvt.s64.s32	%rd4, %r142;
	mul.wide.s32 	%rd47, %r142, 4;
	mov.u64 	%rd48, SeedB$counters;
	add.s64 	%rd5, %rd48, %rd47;
	ld.shared.u32 	%r70, [%rd5];
	mov.u32 	%r71, 16;
	min.s32 	%r22, %r71, %r70;
	shr.s32 	%r72, %r22, 31;
	shr.u32 	%r73, %r72, 29;
	add.s32 	%r74, %r22, %r73;
	and.b32  	%r24, %r74, -8;
	sub.s32 	%r23, %r22, %r24;
	add.s64 	%rd49, %rd1, %rd4;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd51, %rd29, %rd50;
	atom.global.add.u32 	%r25, [%rd51], %r24;
	setp.lt.s32	%p7, %r24, 1;
	@%p7 bra 	BB2_13;

	add.s32 	%r76, %r11, %r142;
	cvt.s64.s32	%rd52, %r76;
	mul.lo.s64 	%rd53, %rd3, %rd52;
	sub.s32 	%r77, %r47, %r24;
	min.s32 	%r78, %r25, %r77;
	cvt.s64.s32	%rd54, %r78;
	add.s64 	%rd123, %rd53, %rd54;
	mul.wide.s32 	%rd55, %r142, 128;
	mov.u64 	%rd56, SeedB$tmp;
	add.s64 	%rd122, %rd56, %rd55;
	mov.u32 	%r146, 0;

BB2_12:
	ld.shared.u64 	%rd57, [%rd122+8];
	ld.shared.u64 	%rd58, [%rd122];
	ld.shared.u64 	%rd59, [%rd122+24];
	ld.shared.u64 	%rd60, [%rd122+16];
	shr.u64 	%rd61, %rd123, 2;
	add.s64 	%rd62, %rd61, %rd2;
	shl.b64 	%rd63, %rd62, 5;
	add.s64 	%rd64, %rd27, %rd63;
	st.global.v2.u64 	[%rd64+16], {%rd60, %rd59};
	st.global.v2.u64 	[%rd64], {%rd58, %rd57};
	add.s64 	%rd123, %rd123, 4;
	add.s64 	%rd122, %rd122, 32;
	add.s32 	%r146, %r146, 4;
	setp.lt.s32	%p8, %r146, %r24;
	@%p8 bra 	BB2_12;

BB2_13:
	setp.lt.s32	%p9, %r23, 1;
	@%p9 bra 	BB2_23;

	and.b32  	%r28, %r23, 3;
	setp.eq.s32	%p10, %r28, 0;
	mov.u32 	%r150, 0;
	@%p10 bra 	BB2_20;

	setp.eq.s32	%p11, %r28, 1;
	mov.u32 	%r148, 0;
	@%p11 bra 	BB2_19;

	setp.eq.s32	%p12, %r28, 2;
	mov.u32 	%r147, 0;
	@%p12 bra 	BB2_18;

	shl.b64 	%rd65, %rd4, 7;
	mov.u64 	%rd66, SeedB$tmp;
	add.s64 	%rd67, %rd66, %rd65;
	mul.wide.s32 	%rd68, %r24, 8;
	add.s64 	%rd69, %rd67, %rd68;
	ld.shared.v2.u32 	{%r91, %r92}, [%rd69];
	st.shared.v2.u32 	[%rd67], {%r91, %r92};
	mov.u32 	%r147, 1;

BB2_18:
	add.s32 	%r95, %r147, %r24;
	shl.b64 	%rd70, %rd4, 7;
	mov.u64 	%rd71, SeedB$tmp;
	add.s64 	%rd72, %rd71, %rd70;
	mul.wide.s32 	%rd73, %r95, 8;
	add.s64 	%rd74, %rd72, %rd73;
	ld.shared.v2.u32 	{%r96, %r97}, [%rd74];
	mul.wide.u32 	%rd75, %r147, 8;
	add.s64 	%rd76, %rd72, %rd75;
	st.shared.v2.u32 	[%rd76], {%r96, %r97};
	add.s32 	%r148, %r147, 1;

BB2_19:
	add.s32 	%r100, %r148, %r24;
	shl.b64 	%rd77, %rd4, 7;
	mov.u64 	%rd78, SeedB$tmp;
	add.s64 	%rd79, %rd78, %rd77;
	mul.wide.s32 	%rd80, %r100, 8;
	add.s64 	%rd81, %rd79, %rd80;
	ld.shared.v2.u32 	{%r101, %r102}, [%rd81];
	mul.wide.s32 	%rd82, %r148, 8;
	add.s64 	%rd83, %rd79, %rd82;
	st.shared.v2.u32 	[%rd83], {%r101, %r102};
	add.s32 	%r150, %r148, 1;

BB2_20:
	setp.lt.u32	%p13, %r23, 4;
	@%p13 bra 	BB2_23;

	mul.wide.s32 	%rd84, %r142, 128;
	mov.u64 	%rd85, SeedB$tmp;
	add.s64 	%rd124, %rd85, %rd84;
	mul.wide.s32 	%rd13, %r150, 8;
	add.s32 	%r105, %r22, %r150;
	sub.s32 	%r106, %r105, %r23;
	mul.wide.s32 	%rd14, %r106, 8;

BB2_22:
	add.s64 	%rd86, %rd124, %rd14;
	ld.shared.v2.u32 	{%r107, %r108}, [%rd86];
	add.s64 	%rd87, %rd124, %rd13;
	st.shared.v2.u32 	[%rd87], {%r107, %r108};
	add.s64 	%rd88, %rd124, 8;
	add.s64 	%rd89, %rd88, %rd14;
	ld.shared.v2.u32 	{%r111, %r112}, [%rd89];
	add.s64 	%rd90, %rd88, %rd13;
	st.shared.v2.u32 	[%rd90], {%r111, %r112};
	add.s64 	%rd91, %rd124, 16;
	add.s64 	%rd92, %rd91, %rd14;
	ld.shared.v2.u32 	{%r115, %r116}, [%rd92];
	add.s64 	%rd93, %rd91, %rd13;
	st.shared.v2.u32 	[%rd93], {%r115, %r116};
	add.s64 	%rd94, %rd124, 24;
	add.s64 	%rd95, %rd94, %rd14;
	ld.shared.v2.u32 	{%r119, %r120}, [%rd95];
	add.s64 	%rd96, %rd94, %rd13;
	st.shared.v2.u32 	[%rd96], {%r119, %r120};
	add.s64 	%rd124, %rd124, 32;
	add.s32 	%r150, %r150, 4;
	setp.lt.s32	%p14, %r150, %r23;
	@%p14 bra 	BB2_22;

BB2_23:
	st.shared.u32 	[%rd5], %r23;

BB2_24:
	bar.sync 	0;

BB2_25:
	add.s32 	%r143, %r143, 1;
	setp.lt.s32	%p15, %r143, %r8;
	@%p15 bra 	BB2_5;

BB2_26:
	@%p1 bra 	BB2_34;

	shl.b32 	%r38, %r6, 6;
	cvt.s64.s32	%rd97, %r38;
	cvt.u64.u32	%rd98, %r49;
	add.s64 	%rd17, %rd97, %rd98;
	add.s32 	%r39, %r47, -4;
	cvt.s64.s32	%rd18, %r47;
	cvt.u64.u32	%rd19, %r9;

BB2_28:
	cvt.s64.s32	%rd20, %r152;
	mul.wide.s32 	%rd99, %r152, 4;
	mov.u64 	%rd100, SeedB$counters;
	add.s64 	%rd101, %rd100, %rd99;
	ld.shared.u32 	%r123, [%rd101];
	mov.u32 	%r124, 16;
	min.s32 	%r41, %r124, %r123;
	and.b32  	%r125, %r41, 3;
	setp.eq.s32	%p17, %r125, 0;
	mov.u32 	%r153, %r41;
	@%p17 bra 	BB2_30;

BB2_29:
	shl.b64 	%rd102, %rd20, 7;
	mov.u64 	%rd103, SeedB$tmp;
	add.s64 	%rd104, %rd103, %rd102;
	mul.wide.s32 	%rd105, %r153, 8;
	add.s64 	%rd106, %rd104, %rd105;
	mov.u32 	%r126, 0;
	st.shared.v2.u32 	[%rd106], {%r126, %r126};
	add.s32 	%r153, %r153, 1;
	and.b32  	%r127, %r153, 3;
	setp.ne.s32	%p18, %r127, 0;
	@%p18 bra 	BB2_29;

BB2_30:
	setp.lt.s32	%p19, %r41, 1;
	@%p19 bra 	BB2_33;

	cvt.u32.u64	%r129, %rd20;
	add.s64 	%rd107, %rd17, %rd20;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd21, %rd29, %rd108;
	add.s32 	%r130, %r152, %r38;
	cvt.s64.s32	%rd109, %r130;
	mul.lo.s64 	%rd22, %rd109, %rd18;
	mul.wide.s32 	%rd110, %r129, 128;
	mov.u64 	%rd111, SeedB$tmp;
	add.s64 	%rd125, %rd111, %rd110;
	mov.u32 	%r154, 0;

BB2_32:
	atom.global.add.u32 	%r131, [%rd21], 4;
	min.s32 	%r132, %r131, %r39;
	ld.shared.u64 	%rd112, [%rd125+8];
	ld.shared.u64 	%rd113, [%rd125];
	ld.shared.u64 	%rd114, [%rd125+24];
	ld.shared.u64 	%rd115, [%rd125+16];
	cvt.s64.s32	%rd116, %r132;
	add.s64 	%rd117, %rd116, %rd22;
	shr.u64 	%rd118, %rd117, 2;
	add.s64 	%rd119, %rd118, %rd19;
	shl.b64 	%rd120, %rd119, 5;
	add.s64 	%rd121, %rd27, %rd120;
	st.global.v2.u64 	[%rd121+16], {%rd115, %rd114};
	st.global.v2.u64 	[%rd121], {%rd113, %rd112};
	add.s64 	%rd125, %rd125, 32;
	add.s32 	%r154, %r154, 4;
	setp.lt.s32	%p20, %r154, %r41;
	@%p20 bra 	BB2_32;

BB2_33:
	add.s32 	%r152, %r152, %r2;
	setp.lt.s32	%p21, %r152, 64;
	@%p21 bra 	BB2_28;

BB2_34:
	ret;
}

	// .globl	Round
.entry Round(
	.param .u32 Round_param_0,
	.param .u64 .ptr .const .align 8 Round_param_1,
	.param .u64 .ptr .global .align 8 Round_param_2,
	.param .u64 .ptr .global .align 8 Round_param_3,
	.param .u64 .ptr .global .align 4 Round_param_4,
	.param .u64 .ptr .global .align 4 Round_param_5,
	.param .u32 Round_param_6,
	.param .u32 Round_param_7
)
{
	.reg .pred 	%p<94>;
	.reg .b32 	%r<552>;
	.reg .b64 	%rd<192>;
	// demoted variable
	.shared .align 4 .b8 Round$ecounters[16384];

	ld.param.u32 	%r186, [Round_param_0];
	ld.param.u64 	%rd1, [Round_param_2];
	ld.param.u64 	%rd2, [Round_param_3];
	ld.param.u64 	%rd3, [Round_param_4];
	ld.param.u64 	%rd4, [Round_param_5];
	ld.param.u32 	%r187, [Round_param_6];
	ld.param.u32 	%r188, [Round_param_7];
	mov.b32	%r1, %envreg0;
	mov.u32 	%r2, %ctaid.x;
	add.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	setp.gt.s32	%p3, %r5, 4095;
	@%p3 bra 	BB3_3;

	mov.u32 	%r521, %r5;

BB3_2:
	mul.wide.s32 	%rd5, %r521, 4;
	mov.u64 	%rd6, Round$ecounters;
	add.s64 	%rd7, %rd6, %rd5;
	mov.u32 	%r189, 0;
	st.shared.u32 	[%rd7], %r189;
	add.s32 	%r521, %r521, %r4;
	setp.lt.s32	%p4, %r521, 4096;
	@%p4 bra 	BB3_2;

BB3_3:
	bar.sync 	0;
	mul.wide.s32 	%rd8, %r3, 4;
	add.s64 	%rd9, %rd3, %rd8;
	ld.global.nc.u32 	%r190, [%rd9];
	min.s32 	%r8, %r190, %r187;
	add.s32 	%r191, %r4, %r8;
	add.s32 	%r192, %r191, -1;
	div.s32 	%r9, %r192, %r4;
	setp.gt.s32	%p1, %r9, 0;
	mov.pred 	%p93, 0;
	setp.lt.s32	%p6, %r9, 1;
	@%p6 bra 	BB3_41;

	mul.lo.s32 	%r10, %r3, %r187;
	and.b32  	%r11, %r186, 1;
	and.b32  	%r196, %r9, 3;
	mov.u32 	%r522, 0;
	setp.eq.s32	%p7, %r196, 0;
	@%p7 bra 	BB3_21;

	setp.eq.s32	%p8, %r196, 1;
	@%p8 bra 	BB3_16;

	setp.eq.s32	%p9, %r196, 2;
	@%p9 bra 	BB3_11;

	mov.u32 	%r522, 1;
	setp.ge.s32	%p10, %r5, %r8;
	@%p10 bra 	BB3_11;

	add.s32 	%r199, %r5, %r10;
	mul.wide.s32 	%rd10, %r199, 8;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.nc.v2.u32 	{%r200, %r201}, [%rd11];
	or.b32  	%r202, %r200, %r201;
	setp.eq.s32	%p11, %r202, 0;
	@%p11 bra 	BB3_11;

	setp.eq.s32	%p12, %r11, 0;
	selp.b32	%r204, %r200, %r201, %p12;
	shr.u32 	%r14, %r204, 17;
	bfe.u32 	%r205, %r204, 12, 5;
	mov.u32 	%r522, 1;
	shl.b32 	%r15, %r522, %r205;
	mul.wide.u32 	%rd12, %r14, 4;
	mov.u64 	%rd13, Round$ecounters;
	add.s64 	%rd14, %rd13, %rd12;
	atom.shared.or.b32 	%r206, [%rd14], %r15;
	and.b32  	%r207, %r206, %r15;
	setp.eq.s32	%p13, %r207, 0;
	@%p13 bra 	BB3_11;

	add.s32 	%r209, %r14, 2048;
	mul.wide.u32 	%rd15, %r209, 4;
	add.s64 	%rd17, %rd13, %rd15;
	atom.shared.or.b32 	%r210, [%rd17], %r15;

BB3_11:
	neg.s32 	%r211, %r522;
	and.b32  	%r212, %r4, %r211;
	add.s32 	%r17, %r212, %r5;
	setp.ge.s32	%p14, %r17, %r8;
	@%p14 bra 	BB3_15;

	add.s32 	%r213, %r17, %r10;
	mul.wide.s32 	%rd18, %r213, 8;
	add.s64 	%rd19, %rd1, %rd18;
	ld.global.nc.v2.u32 	{%r214, %r215}, [%rd19];
	or.b32  	%r216, %r214, %r215;
	setp.eq.s32	%p15, %r216, 0;
	@%p15 bra 	BB3_15;

	setp.eq.s32	%p16, %r11, 0;
	selp.b32	%r217, %r214, %r215, %p16;
	shr.u32 	%r20, %r217, 17;
	bfe.u32 	%r218, %r217, 12, 5;
	mov.u32 	%r219, 1;
	shl.b32 	%r21, %r219, %r218;
	mul.wide.u32 	%rd20, %r20, 4;
	mov.u64 	%rd21, Round$ecounters;
	add.s64 	%rd22, %rd21, %rd20;
	atom.shared.or.b32 	%r220, [%rd22], %r21;
	and.b32  	%r221, %r220, %r21;
	setp.eq.s32	%p17, %r221, 0;
	@%p17 bra 	BB3_15;

	add.s32 	%r222, %r20, 2048;
	mul.wide.u32 	%rd23, %r222, 4;
	add.s64 	%rd25, %rd21, %rd23;
	atom.shared.or.b32 	%r223, [%rd25], %r21;

BB3_15:
	add.s32 	%r522, %r522, 1;

BB3_16:
	mad.lo.s32 	%r24, %r522, %r4, %r5;
	setp.ge.s32	%p18, %r24, %r8;
	@%p18 bra 	BB3_20;

	add.s32 	%r224, %r24, %r10;
	mul.wide.s32 	%rd26, %r224, 8;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.nc.v2.u32 	{%r225, %r226}, [%rd27];
	or.b32  	%r227, %r225, %r226;
	setp.eq.s32	%p19, %r227, 0;
	@%p19 bra 	BB3_20;

	setp.eq.s32	%p20, %r11, 0;
	selp.b32	%r228, %r225, %r226, %p20;
	shr.u32 	%r27, %r228, 17;
	bfe.u32 	%r229, %r228, 12, 5;
	mov.u32 	%r230, 1;
	shl.b32 	%r28, %r230, %r229;
	mul.wide.u32 	%rd28, %r27, 4;
	mov.u64 	%rd29, Round$ecounters;
	add.s64 	%rd30, %rd29, %rd28;
	atom.shared.or.b32 	%r231, [%rd30], %r28;
	and.b32  	%r232, %r231, %r28;
	setp.eq.s32	%p21, %r232, 0;
	@%p21 bra 	BB3_20;

	add.s32 	%r233, %r27, 2048;
	mul.wide.u32 	%rd31, %r233, 4;
	add.s64 	%rd33, %rd29, %rd31;
	atom.shared.or.b32 	%r234, [%rd33], %r28;

BB3_20:
	add.s32 	%r522, %r522, 1;

BB3_21:
	setp.lt.u32	%p22, %r9, 4;
	@%p22 bra 	BB3_40;

	mul.lo.s32 	%r31, %r187, %r3;
	add.s32 	%r236, %r5, %r31;
	add.s32 	%r237, %r522, 3;
	mul.lo.s32 	%r238, %r4, %r237;
	add.s32 	%r530, %r236, %r238;
	shl.b32 	%r33, %r4, 2;
	add.s32 	%r529, %r5, %r238;
	add.s32 	%r239, %r522, 2;
	mul.lo.s32 	%r240, %r4, %r239;
	add.s32 	%r528, %r236, %r240;
	add.s32 	%r527, %r5, %r240;
	mad.lo.s32 	%r526, %r4, %r522, %r5;
	add.s32 	%r241, %r522, 1;
	mad.lo.s32 	%r525, %r4, %r241, %r5;

BB3_23:
	setp.ge.s32	%p23, %r526, %r8;
	@%p23 bra 	BB3_27;

	add.s32 	%r242, %r31, %r526;
	mul.wide.s32 	%rd34, %r242, 8;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.nc.v2.u32 	{%r243, %r244}, [%rd35];
	or.b32  	%r245, %r243, %r244;
	setp.eq.s32	%p24, %r245, 0;
	@%p24 bra 	BB3_27;

	setp.eq.s32	%p25, %r11, 0;
	selp.b32	%r246, %r243, %r244, %p25;
	shr.u32 	%r48, %r246, 17;
	bfe.u32 	%r247, %r246, 12, 5;
	mov.u32 	%r248, 1;
	shl.b32 	%r49, %r248, %r247;
	mul.wide.u32 	%rd36, %r48, 4;
	mov.u64 	%rd37, Round$ecounters;
	add.s64 	%rd38, %rd37, %rd36;
	atom.shared.or.b32 	%r249, [%rd38], %r49;
	and.b32  	%r250, %r249, %r49;
	setp.eq.s32	%p26, %r250, 0;
	@%p26 bra 	BB3_27;

	add.s32 	%r251, %r48, 2048;
	mul.wide.u32 	%rd39, %r251, 4;
	add.s64 	%rd41, %rd37, %rd39;
	atom.shared.or.b32 	%r252, [%rd41], %r49;

BB3_27:
	setp.ge.s32	%p27, %r525, %r8;
	@%p27 bra 	BB3_31;

	add.s32 	%r253, %r31, %r525;
	mul.wide.s32 	%rd42, %r253, 8;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.nc.v2.u32 	{%r254, %r255}, [%rd43];
	or.b32  	%r256, %r254, %r255;
	setp.eq.s32	%p28, %r256, 0;
	@%p28 bra 	BB3_31;

	setp.eq.s32	%p29, %r11, 0;
	selp.b32	%r257, %r254, %r255, %p29;
	shr.u32 	%r52, %r257, 17;
	bfe.u32 	%r258, %r257, 12, 5;
	mov.u32 	%r259, 1;
	shl.b32 	%r53, %r259, %r258;
	mul.wide.u32 	%rd44, %r52, 4;
	mov.u64 	%rd45, Round$ecounters;
	add.s64 	%rd46, %rd45, %rd44;
	atom.shared.or.b32 	%r260, [%rd46], %r53;
	and.b32  	%r261, %r260, %r53;
	setp.eq.s32	%p30, %r261, 0;
	@%p30 bra 	BB3_31;

	add.s32 	%r262, %r52, 2048;
	mul.wide.u32 	%rd47, %r262, 4;
	add.s64 	%rd49, %rd45, %rd47;
	atom.shared.or.b32 	%r263, [%rd49], %r53;

BB3_31:
	setp.ge.s32	%p31, %r527, %r8;
	@%p31 bra 	BB3_35;

	mul.wide.s32 	%rd50, %r528, 8;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.nc.v2.u32 	{%r264, %r265}, [%rd51];
	or.b32  	%r266, %r264, %r265;
	setp.eq.s32	%p32, %r266, 0;
	@%p32 bra 	BB3_35;

	setp.eq.s32	%p33, %r11, 0;
	selp.b32	%r267, %r264, %r265, %p33;
	shr.u32 	%r56, %r267, 17;
	bfe.u32 	%r268, %r267, 12, 5;
	mov.u32 	%r269, 1;
	shl.b32 	%r57, %r269, %r268;
	mul.wide.u32 	%rd52, %r56, 4;
	mov.u64 	%rd53, Round$ecounters;
	add.s64 	%rd54, %rd53, %rd52;
	atom.shared.or.b32 	%r270, [%rd54], %r57;
	and.b32  	%r271, %r270, %r57;
	setp.eq.s32	%p34, %r271, 0;
	@%p34 bra 	BB3_35;

	add.s32 	%r272, %r56, 2048;
	mul.wide.u32 	%rd55, %r272, 4;
	add.s64 	%rd57, %rd53, %rd55;
	atom.shared.or.b32 	%r273, [%rd57], %r57;

BB3_35:
	setp.ge.s32	%p35, %r529, %r8;
	@%p35 bra 	BB3_39;

	mul.wide.s32 	%rd58, %r530, 8;
	add.s64 	%rd59, %rd1, %rd58;
	ld.global.nc.v2.u32 	{%r274, %r275}, [%rd59];
	or.b32  	%r276, %r274, %r275;
	setp.eq.s32	%p36, %r276, 0;
	@%p36 bra 	BB3_39;

	setp.eq.s32	%p37, %r11, 0;
	selp.b32	%r277, %r274, %r275, %p37;
	shr.u32 	%r60, %r277, 17;
	bfe.u32 	%r278, %r277, 12, 5;
	mov.u32 	%r279, 1;
	shl.b32 	%r61, %r279, %r278;
	mul.wide.u32 	%rd60, %r60, 4;
	mov.u64 	%rd61, Round$ecounters;
	add.s64 	%rd62, %rd61, %rd60;
	atom.shared.or.b32 	%r280, [%rd62], %r61;
	and.b32  	%r281, %r280, %r61;
	setp.eq.s32	%p38, %r281, 0;
	@%p38 bra 	BB3_39;

	add.s32 	%r282, %r60, 2048;
	mul.wide.u32 	%rd63, %r282, 4;
	add.s64 	%rd65, %rd61, %rd63;
	atom.shared.or.b32 	%r283, [%rd65], %r61;

BB3_39:
	add.s32 	%r522, %r522, 4;
	add.s32 	%r530, %r530, %r33;
	add.s32 	%r529, %r529, %r33;
	add.s32 	%r528, %r528, %r33;
	add.s32 	%r527, %r527, %r33;
	add.s32 	%r526, %r526, %r33;
	add.s32 	%r525, %r525, %r33;
	setp.lt.s32	%p39, %r522, %r9;
	@%p39 bra 	BB3_23;

BB3_40:
	mov.pred 	%p93, %p1;

BB3_41:
	bar.sync 	0;
	@!%p93 bra 	BB3_115;
	bra.uni 	BB3_42;

BB3_42:
	mul.lo.s32 	%r69, %r3, %r187;
	and.b32  	%r284, %r186, 1;
	setp.eq.b32	%p40, %r284, 1;
	add.s32 	%r70, %r188, -1;
	and.b32  	%r71, %r9, 3;
	@!%p40 bra 	BB3_79;
	bra.uni 	BB3_43;

BB3_43:
	mov.u32 	%r532, 0;
	setp.eq.s32	%p41, %r71, 0;
	@%p41 bra 	BB3_60;

	setp.eq.s32	%p42, %r71, 1;
	@%p42 bra 	BB3_55;

	setp.eq.s32	%p43, %r71, 2;
	@%p43 bra 	BB3_50;

	mov.u32 	%r532, 1;
	setp.ge.s32	%p44, %r5, %r8;
	@%p44 bra 	BB3_50;

	add.s32 	%r290, %r5, %r69;
	mul.wide.s32 	%rd66, %r290, 8;
	add.s64 	%rd67, %rd1, %rd66;
	ld.global.nc.v2.u32 	{%r291, %r292}, [%rd67];
	or.b32  	%r293, %r291, %r292;
	setp.eq.s32	%p45, %r293, 0;
	@%p45 bra 	BB3_50;

	bfe.u32 	%r295, %r292, 12, 5;
	mov.u32 	%r532, 1;
	shl.b32 	%r296, %r532, %r295;
	shr.u32 	%r297, %r292, 17;
	add.s32 	%r298, %r297, 2048;
	mul.wide.u32 	%rd68, %r298, 4;
	mov.u64 	%rd69, Round$ecounters;
	add.s64 	%rd70, %rd69, %rd68;
	ld.shared.u32 	%r299, [%rd70];
	and.b32  	%r300, %r296, %r299;
	setp.eq.s32	%p46, %r300, 0;
	@%p46 bra 	BB3_50;

	and.b32  	%r302, %r291, 4095;
	mul.wide.u32 	%rd71, %r302, 4;
	add.s64 	%rd72, %rd4, %rd71;
	atom.global.add.u32 	%r303, [%rd72], 1;
	min.s32 	%r304, %r303, %r70;
	mad.lo.s32 	%r305, %r302, %r188, %r304;
	mul.wide.s32 	%rd73, %r305, 8;
	add.s64 	%rd74, %rd2, %rd73;
	st.global.v2.u32 	[%rd74], {%r291, %r292};

BB3_50:
	neg.s32 	%r306, %r532;
	and.b32  	%r307, %r4, %r306;
	add.s32 	%r77, %r307, %r5;
	setp.ge.s32	%p47, %r77, %r8;
	@%p47 bra 	BB3_54;

	add.s32 	%r308, %r77, %r69;
	mul.wide.s32 	%rd75, %r308, 8;
	add.s64 	%rd76, %rd1, %rd75;
	ld.global.nc.v2.u32 	{%r309, %r310}, [%rd76];
	or.b32  	%r311, %r309, %r310;
	setp.eq.s32	%p48, %r311, 0;
	@%p48 bra 	BB3_54;

	bfe.u32 	%r312, %r310, 12, 5;
	mov.u32 	%r313, 1;
	shl.b32 	%r314, %r313, %r312;
	shr.u32 	%r315, %r310, 17;
	add.s32 	%r316, %r315, 2048;
	mul.wide.u32 	%rd77, %r316, 4;
	mov.u64 	%rd78, Round$ecounters;
	add.s64 	%rd79, %rd78, %rd77;
	ld.shared.u32 	%r317, [%rd79];
	and.b32  	%r318, %r314, %r317;
	setp.eq.s32	%p49, %r318, 0;
	@%p49 bra 	BB3_54;

	and.b32  	%r319, %r309, 4095;
	mul.wide.u32 	%rd80, %r319, 4;
	add.s64 	%rd81, %rd4, %rd80;
	atom.global.add.u32 	%r320, [%rd81], 1;
	min.s32 	%r321, %r320, %r70;
	mad.lo.s32 	%r322, %r319, %r188, %r321;
	mul.wide.s32 	%rd82, %r322, 8;
	add.s64 	%rd83, %rd2, %rd82;
	st.global.v2.u32 	[%rd83], {%r309, %r310};

BB3_54:
	add.s32 	%r532, %r532, 1;

BB3_55:
	mad.lo.s32 	%r84, %r532, %r4, %r5;
	setp.ge.s32	%p50, %r84, %r8;
	@%p50 bra 	BB3_59;

	add.s32 	%r323, %r84, %r69;
	mul.wide.s32 	%rd84, %r323, 8;
	add.s64 	%rd85, %rd1, %rd84;
	ld.global.nc.v2.u32 	{%r324, %r325}, [%rd85];
	or.b32  	%r326, %r324, %r325;
	setp.eq.s32	%p51, %r326, 0;
	@%p51 bra 	BB3_59;

	bfe.u32 	%r327, %r325, 12, 5;
	mov.u32 	%r328, 1;
	shl.b32 	%r329, %r328, %r327;
	shr.u32 	%r330, %r325, 17;
	add.s32 	%r331, %r330, 2048;
	mul.wide.u32 	%rd86, %r331, 4;
	mov.u64 	%rd87, Round$ecounters;
	add.s64 	%rd88, %rd87, %rd86;
	ld.shared.u32 	%r332, [%rd88];
	and.b32  	%r333, %r329, %r332;
	setp.eq.s32	%p52, %r333, 0;
	@%p52 bra 	BB3_59;

	and.b32  	%r334, %r324, 4095;
	mul.wide.u32 	%rd89, %r334, 4;
	add.s64 	%rd90, %rd4, %rd89;
	atom.global.add.u32 	%r335, [%rd90], 1;
	min.s32 	%r336, %r335, %r70;
	mad.lo.s32 	%r337, %r334, %r188, %r336;
	mul.wide.s32 	%rd91, %r337, 8;
	add.s64 	%rd92, %rd2, %rd91;
	st.global.v2.u32 	[%rd92], {%r324, %r325};

BB3_59:
	add.s32 	%r532, %r532, 1;

BB3_60:
	setp.lt.u32	%p53, %r9, 4;
	@%p53 bra 	BB3_115;

	mul.lo.s32 	%r91, %r187, %r3;
	add.s32 	%r339, %r5, %r91;
	add.s32 	%r340, %r532, 3;
	mul.lo.s32 	%r341, %r4, %r340;
	add.s32 	%r540, %r339, %r341;
	shl.b32 	%r93, %r4, 2;
	add.s32 	%r539, %r5, %r341;
	add.s32 	%r342, %r532, 2;
	mul.lo.s32 	%r343, %r4, %r342;
	add.s32 	%r538, %r339, %r343;
	add.s32 	%r537, %r5, %r343;
	mad.lo.s32 	%r536, %r4, %r532, %r5;
	add.s32 	%r344, %r532, 1;
	mad.lo.s32 	%r535, %r4, %r344, %r5;

BB3_62:
	setp.ge.s32	%p54, %r536, %r8;
	@%p54 bra 	BB3_66;

	add.s32 	%r345, %r91, %r536;
	mul.wide.s32 	%rd93, %r345, 8;
	add.s64 	%rd94, %rd1, %rd93;
	ld.global.nc.v2.u32 	{%r346, %r347}, [%rd94];
	or.b32  	%r348, %r346, %r347;
	setp.eq.s32	%p55, %r348, 0;
	@%p55 bra 	BB3_66;

	bfe.u32 	%r349, %r347, 12, 5;
	mov.u32 	%r350, 1;
	shl.b32 	%r351, %r350, %r349;
	shr.u32 	%r352, %r347, 17;
	add.s32 	%r353, %r352, 2048;
	mul.wide.u32 	%rd95, %r353, 4;
	mov.u64 	%rd96, Round$ecounters;
	add.s64 	%rd97, %rd96, %rd95;
	ld.shared.u32 	%r354, [%rd97];
	and.b32  	%r355, %r351, %r354;
	setp.eq.s32	%p56, %r355, 0;
	@%p56 bra 	BB3_66;

	and.b32  	%r356, %r346, 4095;
	mul.wide.u32 	%rd98, %r356, 4;
	add.s64 	%rd99, %rd4, %rd98;
	atom.global.add.u32 	%r357, [%rd99], 1;
	min.s32 	%r358, %r357, %r70;
	mad.lo.s32 	%r359, %r356, %r188, %r358;
	mul.wide.s32 	%rd100, %r359, 8;
	add.s64 	%rd101, %rd2, %rd100;
	st.global.v2.u32 	[%rd101], {%r346, %r347};

BB3_66:
	setp.ge.s32	%p57, %r535, %r8;
	@%p57 bra 	BB3_70;

	add.s32 	%r360, %r91, %r535;
	mul.wide.s32 	%rd102, %r360, 8;
	add.s64 	%rd103, %rd1, %rd102;
	ld.global.nc.v2.u32 	{%r361, %r362}, [%rd103];
	or.b32  	%r363, %r361, %r362;
	setp.eq.s32	%p58, %r363, 0;
	@%p58 bra 	BB3_70;

	bfe.u32 	%r364, %r362, 12, 5;
	mov.u32 	%r365, 1;
	shl.b32 	%r366, %r365, %r364;
	shr.u32 	%r367, %r362, 17;
	add.s32 	%r368, %r367, 2048;
	mul.wide.u32 	%rd104, %r368, 4;
	mov.u64 	%rd105, Round$ecounters;
	add.s64 	%rd106, %rd105, %rd104;
	ld.shared.u32 	%r369, [%rd106];
	and.b32  	%r370, %r366, %r369;
	setp.eq.s32	%p59, %r370, 0;
	@%p59 bra 	BB3_70;

	and.b32  	%r371, %r361, 4095;
	mul.wide.u32 	%rd107, %r371, 4;
	add.s64 	%rd108, %rd4, %rd107;
	atom.global.add.u32 	%r372, [%rd108], 1;
	min.s32 	%r373, %r372, %r70;
	mad.lo.s32 	%r374, %r371, %r188, %r373;
	mul.wide.s32 	%rd109, %r374, 8;
	add.s64 	%rd110, %rd2, %rd109;
	st.global.v2.u32 	[%rd110], {%r361, %r362};

BB3_70:
	setp.ge.s32	%p60, %r537, %r8;
	@%p60 bra 	BB3_74;

	mul.wide.s32 	%rd111, %r538, 8;
	add.s64 	%rd112, %rd1, %rd111;
	ld.global.nc.v2.u32 	{%r375, %r376}, [%rd112];
	or.b32  	%r377, %r375, %r376;
	setp.eq.s32	%p61, %r377, 0;
	@%p61 bra 	BB3_74;

	bfe.u32 	%r378, %r376, 12, 5;
	mov.u32 	%r379, 1;
	shl.b32 	%r380, %r379, %r378;
	shr.u32 	%r381, %r376, 17;
	add.s32 	%r382, %r381, 2048;
	mul.wide.u32 	%rd113, %r382, 4;
	mov.u64 	%rd114, Round$ecounters;
	add.s64 	%rd115, %rd114, %rd113;
	ld.shared.u32 	%r383, [%rd115];
	and.b32  	%r384, %r380, %r383;
	setp.eq.s32	%p62, %r384, 0;
	@%p62 bra 	BB3_74;

	and.b32  	%r385, %r375, 4095;
	mul.wide.u32 	%rd116, %r385, 4;
	add.s64 	%rd117, %rd4, %rd116;
	atom.global.add.u32 	%r386, [%rd117], 1;
	min.s32 	%r387, %r386, %r70;
	mad.lo.s32 	%r388, %r385, %r188, %r387;
	mul.wide.s32 	%rd118, %r388, 8;
	add.s64 	%rd119, %rd2, %rd118;
	st.global.v2.u32 	[%rd119], {%r375, %r376};

BB3_74:
	setp.ge.s32	%p63, %r539, %r8;
	@%p63 bra 	BB3_78;

	mul.wide.s32 	%rd120, %r540, 8;
	add.s64 	%rd121, %rd1, %rd120;
	ld.global.nc.v2.u32 	{%r389, %r390}, [%rd121];
	or.b32  	%r391, %r389, %r390;
	setp.eq.s32	%p64, %r391, 0;
	@%p64 bra 	BB3_78;

	bfe.u32 	%r392, %r390, 12, 5;
	mov.u32 	%r393, 1;
	shl.b32 	%r394, %r393, %r392;
	shr.u32 	%r395, %r390, 17;
	add.s32 	%r396, %r395, 2048;
	mul.wide.u32 	%rd122, %r396, 4;
	mov.u64 	%rd123, Round$ecounters;
	add.s64 	%rd124, %rd123, %rd122;
	ld.shared.u32 	%r397, [%rd124];
	and.b32  	%r398, %r394, %r397;
	setp.eq.s32	%p65, %r398, 0;
	@%p65 bra 	BB3_78;

	and.b32  	%r399, %r389, 4095;
	mul.wide.u32 	%rd125, %r399, 4;
	add.s64 	%rd126, %rd4, %rd125;
	atom.global.add.u32 	%r400, [%rd126], 1;
	min.s32 	%r401, %r400, %r70;
	mad.lo.s32 	%r402, %r399, %r188, %r401;
	mul.wide.s32 	%rd127, %r402, 8;
	add.s64 	%rd128, %rd2, %rd127;
	st.global.v2.u32 	[%rd128], {%r389, %r390};

BB3_78:
	add.s32 	%r532, %r532, 4;
	add.s32 	%r540, %r540, %r93;
	add.s32 	%r539, %r539, %r93;
	add.s32 	%r538, %r538, %r93;
	add.s32 	%r537, %r537, %r93;
	add.s32 	%r536, %r536, %r93;
	add.s32 	%r535, %r535, %r93;
	setp.lt.s32	%p66, %r532, %r9;
	@%p66 bra 	BB3_62;
	bra.uni 	BB3_115;

BB3_79:
	mov.u32 	%r542, 0;
	setp.eq.s32	%p67, %r71, 0;
	@%p67 bra 	BB3_96;

	setp.eq.s32	%p68, %r71, 1;
	@%p68 bra 	BB3_91;

	setp.eq.s32	%p69, %r71, 2;
	@%p69 bra 	BB3_86;

	mov.u32 	%r542, 1;
	setp.ge.s32	%p70, %r5, %r8;
	@%p70 bra 	BB3_86;

	add.s32 	%r408, %r5, %r69;
	mul.wide.s32 	%rd129, %r408, 8;
	add.s64 	%rd130, %rd1, %rd129;
	ld.global.nc.v2.u32 	{%r409, %r410}, [%rd130];
	or.b32  	%r411, %r409, %r410;
	setp.eq.s32	%p71, %r411, 0;
	@%p71 bra 	BB3_86;

	bfe.u32 	%r413, %r409, 12, 5;
	mov.u32 	%r542, 1;
	shl.b32 	%r414, %r542, %r413;
	shr.u32 	%r415, %r409, 17;
	add.s32 	%r416, %r415, 2048;
	mul.wide.u32 	%rd131, %r416, 4;
	mov.u64 	%rd132, Round$ecounters;
	add.s64 	%rd133, %rd132, %rd131;
	ld.shared.u32 	%r417, [%rd133];
	and.b32  	%r418, %r414, %r417;
	setp.eq.s32	%p72, %r418, 0;
	@%p72 bra 	BB3_86;

	and.b32  	%r420, %r410, 4095;
	mul.wide.u32 	%rd134, %r420, 4;
	add.s64 	%rd135, %rd4, %rd134;
	atom.global.add.u32 	%r421, [%rd135], 1;
	min.s32 	%r422, %r421, %r70;
	mad.lo.s32 	%r423, %r420, %r188, %r422;
	mul.wide.s32 	%rd136, %r423, 8;
	add.s64 	%rd137, %rd2, %rd136;
	st.global.v2.u32 	[%rd137], {%r409, %r410};

BB3_86:
	neg.s32 	%r424, %r542;
	and.b32  	%r425, %r4, %r424;
	add.s32 	%r134, %r425, %r5;
	setp.ge.s32	%p73, %r134, %r8;
	@%p73 bra 	BB3_90;

	add.s32 	%r426, %r134, %r69;
	mul.wide.s32 	%rd138, %r426, 8;
	add.s64 	%rd139, %rd1, %rd138;
	ld.global.nc.v2.u32 	{%r427, %r428}, [%rd139];
	or.b32  	%r429, %r427, %r428;
	setp.eq.s32	%p74, %r429, 0;
	@%p74 bra 	BB3_90;

	bfe.u32 	%r430, %r427, 12, 5;
	mov.u32 	%r431, 1;
	shl.b32 	%r432, %r431, %r430;
	shr.u32 	%r433, %r427, 17;
	add.s32 	%r434, %r433, 2048;
	mul.wide.u32 	%rd140, %r434, 4;
	mov.u64 	%rd141, Round$ecounters;
	add.s64 	%rd142, %rd141, %rd140;
	ld.shared.u32 	%r435, [%rd142];
	and.b32  	%r436, %r432, %r435;
	setp.eq.s32	%p75, %r436, 0;
	@%p75 bra 	BB3_90;

	and.b32  	%r437, %r428, 4095;
	mul.wide.u32 	%rd143, %r437, 4;
	add.s64 	%rd144, %rd4, %rd143;
	atom.global.add.u32 	%r438, [%rd144], 1;
	min.s32 	%r439, %r438, %r70;
	mad.lo.s32 	%r440, %r437, %r188, %r439;
	mul.wide.s32 	%rd145, %r440, 8;
	add.s64 	%rd146, %rd2, %rd145;
	st.global.v2.u32 	[%rd146], {%r427, %r428};

BB3_90:
	add.s32 	%r542, %r542, 1;

BB3_91:
	mad.lo.s32 	%r141, %r542, %r4, %r5;
	setp.ge.s32	%p76, %r141, %r8;
	@%p76 bra 	BB3_95;

	add.s32 	%r441, %r141, %r69;
	mul.wide.s32 	%rd147, %r441, 8;
	add.s64 	%rd148, %rd1, %rd147;
	ld.global.nc.v2.u32 	{%r442, %r443}, [%rd148];
	or.b32  	%r444, %r442, %r443;
	setp.eq.s32	%p77, %r444, 0;
	@%p77 bra 	BB3_95;

	bfe.u32 	%r445, %r442, 12, 5;
	mov.u32 	%r446, 1;
	shl.b32 	%r447, %r446, %r445;
	shr.u32 	%r448, %r442, 17;
	add.s32 	%r449, %r448, 2048;
	mul.wide.u32 	%rd149, %r449, 4;
	mov.u64 	%rd150, Round$ecounters;
	add.s64 	%rd151, %rd150, %rd149;
	ld.shared.u32 	%r450, [%rd151];
	and.b32  	%r451, %r447, %r450;
	setp.eq.s32	%p78, %r451, 0;
	@%p78 bra 	BB3_95;

	and.b32  	%r452, %r443, 4095;
	mul.wide.u32 	%rd152, %r452, 4;
	add.s64 	%rd153, %rd4, %rd152;
	atom.global.add.u32 	%r453, [%rd153], 1;
	min.s32 	%r454, %r453, %r70;
	mad.lo.s32 	%r455, %r452, %r188, %r454;
	mul.wide.s32 	%rd154, %r455, 8;
	add.s64 	%rd155, %rd2, %rd154;
	st.global.v2.u32 	[%rd155], {%r442, %r443};

BB3_95:
	add.s32 	%r542, %r542, 1;

BB3_96:
	setp.lt.u32	%p79, %r9, 4;
	@%p79 bra 	BB3_115;

	mul.lo.s32 	%r148, %r187, %r3;
	add.s32 	%r457, %r5, %r148;
	add.s32 	%r458, %r542, 3;
	mul.lo.s32 	%r459, %r4, %r458;
	add.s32 	%r550, %r457, %r459;
	shl.b32 	%r150, %r4, 2;
	add.s32 	%r549, %r5, %r459;
	add.s32 	%r460, %r542, 2;
	mul.lo.s32 	%r461, %r4, %r460;
	add.s32 	%r548, %r457, %r461;
	add.s32 	%r547, %r5, %r461;
	add.s32 	%r462, %r542, 1;
	mad.lo.s32 	%r546, %r4, %r462, %r5;
	mad.lo.s32 	%r545, %r4, %r542, %r5;

BB3_98:
	setp.ge.s32	%p80, %r545, %r8;
	@%p80 bra 	BB3_102;

	add.s32 	%r463, %r148, %r545;
	mul.wide.s32 	%rd156, %r463, 8;
	add.s64 	%rd157, %rd1, %rd156;
	ld.global.nc.v2.u32 	{%r464, %r465}, [%rd157];
	or.b32  	%r466, %r464, %r465;
	setp.eq.s32	%p81, %r466, 0;
	@%p81 bra 	BB3_102;

	bfe.u32 	%r467, %r464, 12, 5;
	mov.u32 	%r468, 1;
	shl.b32 	%r469, %r468, %r467;
	shr.u32 	%r470, %r464, 17;
	add.s32 	%r471, %r470, 2048;
	mul.wide.u32 	%rd158, %r471, 4;
	mov.u64 	%rd159, Round$ecounters;
	add.s64 	%rd160, %rd159, %rd158;
	ld.shared.u32 	%r472, [%rd160];
	and.b32  	%r473, %r469, %r472;
	setp.eq.s32	%p82, %r473, 0;
	@%p82 bra 	BB3_102;

	and.b32  	%r474, %r465, 4095;
	mul.wide.u32 	%rd161, %r474, 4;
	add.s64 	%rd162, %rd4, %rd161;
	atom.global.add.u32 	%r475, [%rd162], 1;
	min.s32 	%r476, %r475, %r70;
	mad.lo.s32 	%r477, %r474, %r188, %r476;
	mul.wide.s32 	%rd163, %r477, 8;
	add.s64 	%rd164, %rd2, %rd163;
	st.global.v2.u32 	[%rd164], {%r464, %r465};

BB3_102:
	setp.ge.s32	%p83, %r546, %r8;
	@%p83 bra 	BB3_106;

	add.s32 	%r478, %r148, %r546;
	mul.wide.s32 	%rd165, %r478, 8;
	add.s64 	%rd166, %rd1, %rd165;
	ld.global.nc.v2.u32 	{%r479, %r480}, [%rd166];
	or.b32  	%r481, %r479, %r480;
	setp.eq.s32	%p84, %r481, 0;
	@%p84 bra 	BB3_106;

	bfe.u32 	%r482, %r479, 12, 5;
	mov.u32 	%r483, 1;
	shl.b32 	%r484, %r483, %r482;
	shr.u32 	%r485, %r479, 17;
	add.s32 	%r486, %r485, 2048;
	mul.wide.u32 	%rd167, %r486, 4;
	mov.u64 	%rd168, Round$ecounters;
	add.s64 	%rd169, %rd168, %rd167;
	ld.shared.u32 	%r487, [%rd169];
	and.b32  	%r488, %r484, %r487;
	setp.eq.s32	%p85, %r488, 0;
	@%p85 bra 	BB3_106;

	and.b32  	%r489, %r480, 4095;
	mul.wide.u32 	%rd170, %r489, 4;
	add.s64 	%rd171, %rd4, %rd170;
	atom.global.add.u32 	%r490, [%rd171], 1;
	min.s32 	%r491, %r490, %r70;
	mad.lo.s32 	%r492, %r489, %r188, %r491;
	mul.wide.s32 	%rd172, %r492, 8;
	add.s64 	%rd173, %rd2, %rd172;
	st.global.v2.u32 	[%rd173], {%r479, %r480};

BB3_106:
	setp.ge.s32	%p86, %r547, %r8;
	@%p86 bra 	BB3_110;

	mul.wide.s32 	%rd174, %r548, 8;
	add.s64 	%rd175, %rd1, %rd174;
	ld.global.nc.v2.u32 	{%r493, %r494}, [%rd175];
	or.b32  	%r495, %r493, %r494;
	setp.eq.s32	%p87, %r495, 0;
	@%p87 bra 	BB3_110;

	bfe.u32 	%r496, %r493, 12, 5;
	mov.u32 	%r497, 1;
	shl.b32 	%r498, %r497, %r496;
	shr.u32 	%r499, %r493, 17;
	add.s32 	%r500, %r499, 2048;
	mul.wide.u32 	%rd176, %r500, 4;
	mov.u64 	%rd177, Round$ecounters;
	add.s64 	%rd178, %rd177, %rd176;
	ld.shared.u32 	%r501, [%rd178];
	and.b32  	%r502, %r498, %r501;
	setp.eq.s32	%p88, %r502, 0;
	@%p88 bra 	BB3_110;

	and.b32  	%r503, %r494, 4095;
	mul.wide.u32 	%rd179, %r503, 4;
	add.s64 	%rd180, %rd4, %rd179;
	atom.global.add.u32 	%r504, [%rd180], 1;
	min.s32 	%r505, %r504, %r70;
	mad.lo.s32 	%r506, %r503, %r188, %r505;
	mul.wide.s32 	%rd181, %r506, 8;
	add.s64 	%rd182, %rd2, %rd181;
	st.global.v2.u32 	[%rd182], {%r493, %r494};

BB3_110:
	setp.ge.s32	%p89, %r549, %r8;
	@%p89 bra 	BB3_114;

	mul.wide.s32 	%rd183, %r550, 8;
	add.s64 	%rd184, %rd1, %rd183;
	ld.global.nc.v2.u32 	{%r507, %r508}, [%rd184];
	or.b32  	%r509, %r507, %r508;
	setp.eq.s32	%p90, %r509, 0;
	@%p90 bra 	BB3_114;

	bfe.u32 	%r510, %r507, 12, 5;
	mov.u32 	%r511, 1;
	shl.b32 	%r512, %r511, %r510;
	shr.u32 	%r513, %r507, 17;
	add.s32 	%r514, %r513, 2048;
	mul.wide.u32 	%rd185, %r514, 4;
	mov.u64 	%rd186, Round$ecounters;
	add.s64 	%rd187, %rd186, %rd185;
	ld.shared.u32 	%r515, [%rd187];
	and.b32  	%r516, %r512, %r515;
	setp.eq.s32	%p91, %r516, 0;
	@%p91 bra 	BB3_114;

	and.b32  	%r517, %r508, 4095;
	mul.wide.u32 	%rd188, %r517, 4;
	add.s64 	%rd189, %rd4, %rd188;
	atom.global.add.u32 	%r518, [%rd189], 1;
	min.s32 	%r519, %r518, %r70;
	mad.lo.s32 	%r520, %r517, %r188, %r519;
	mul.wide.s32 	%rd190, %r520, 8;
	add.s64 	%rd191, %rd2, %rd190;
	st.global.v2.u32 	[%rd191], {%r507, %r508};

BB3_114:
	add.s32 	%r542, %r542, 4;
	add.s32 	%r550, %r550, %r150;
	add.s32 	%r549, %r549, %r150;
	add.s32 	%r548, %r548, %r150;
	add.s32 	%r547, %r547, %r150;
	add.s32 	%r546, %r546, %r150;
	add.s32 	%r545, %r545, %r150;
	setp.lt.s32	%p92, %r542, %r9;
	@%p92 bra 	BB3_98;

BB3_115:
	ret;
}

	// .globl	Tail
.entry Tail(
	.param .u64 .ptr .global .align 8 Tail_param_0,
	.param .u64 .ptr .global .align 8 Tail_param_1,
	.param .u64 .ptr .global .align 4 Tail_param_2,
	.param .u64 .ptr .global .align 4 Tail_param_3,
	.param .u32 Tail_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<11>;
	// demoted variable
	.shared .align 4 .u32 Tail$destIdx;

	ld.param.u64 	%rd3, [Tail_param_0];
	ld.param.u64 	%rd4, [Tail_param_1];
	ld.param.u64 	%rd6, [Tail_param_2];
	ld.param.u64 	%rd5, [Tail_param_3];
	ld.param.u32 	%r7, [Tail_param_4];
	mov.u32 	%r18, %tid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.b32	%r9, %envreg0;
	add.s32 	%r2, %r8, %r9;
	mul.wide.s32 	%rd7, %r2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u32 	%r3, [%rd8];
	setp.ne.s32	%p1, %r18, 0;
	@%p1 bra 	BB4_2;

	atom.global.add.u32 	%r10, [%rd5], %r3;
	st.shared.u32 	[Tail$destIdx], %r10;

BB4_2:
	bar.sync 	0;
	setp.ge.s32	%p2, %r18, %r3;
	@%p2 bra 	BB4_5;

	mad.lo.s32 	%r11, %r2, %r7, %r18;
	mul.wide.s32 	%rd9, %r11, 8;
	add.s64 	%rd1, %rd3, %rd9;
	ld.shared.u32 	%r12, [Tail$destIdx];
	add.s32 	%r13, %r12, %r18;
	mul.wide.s32 	%rd10, %r13, 8;
	add.s64 	%rd2, %rd4, %rd10;
	mov.u32 	%r4, %ntid.x;

BB4_4:
	ld.global.v2.u32 	{%r14, %r15}, [%rd1];
	st.global.v2.u32 	[%rd2], {%r14, %r15};
	add.s32 	%r18, %r18, %r4;
	setp.lt.s32	%p3, %r18, %r3;
	@%p3 bra 	BB4_4;

BB4_5:
	ret;
}


  